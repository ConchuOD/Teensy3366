
xai502.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001958  00001a0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001958  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800112  00800112  00001a1e  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  00001a1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000078  00000000  00000000  00001a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000b4  00000000  00000000  00001a97  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a41  00000000  00000000  00001b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000045b  00000000  00000000  0000358c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dca  00000000  00000000  000039e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  000047b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040b  00000000  00000000  00004864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000848  00000000  00000000  00004c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000054b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
// Move the mouse.  x, y are -32,767 to 32,767 and wheel is -127 to 127.  Use 0 for no movement.
void usb_mouse_update(const uint8_t button_mask,
	const int8_t x_low, const int8_t x_high, 
	const int8_t y_low, const int8_t y_high, 
	const int8_t wheel)
{
       0:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__ctors_end>
       4:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
       8:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
       c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      10:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      14:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      18:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      1c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      20:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      24:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      28:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__vector_10>
      2c:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__vector_11>
      30:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      34:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      38:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      3c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      40:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      44:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      48:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      4c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      50:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      54:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      58:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      5c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      60:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      64:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      68:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      6c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      70:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      74:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      78:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      7c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      80:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      84:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      88:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      8c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      90:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      94:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      98:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      9c:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      a0:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      a4:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>
      a8:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__bad_interrupt>

000000ac <srom>:
      ac:	02 09 99 a2 06 bf 9e be da 3c db 34 ea 56 0f 9c     .........<.4.V..
      bc:	9b 95 a8 d2 07 6d 5e 13 85 69 50 03 84 6b 54 0b     .....m^..iP..kT.
      cc:	75 68 52 07 8c 9a b6 cf fd 78 78 66 2f dc 3a d7     uhR......xxf/.:.
      dc:	2d b2 f3 6a 56 0f 7d 78 53 24 ca f7 6c 3b d5 28     -..jV.}xS$..l;.(
      ec:	d2 07 6d 50 13 85 83 73 67 4a f7 6c 3b f4 6a 37     ..mP...sgJ.l;.j7
      fc:	cd f9 51 01 80 63 21 a9 d0 03 84 6b 54 2a b7 ec     ..Q..c!....kT*..
     10c:	3b f4 6a 56 2e de 3e fe 5f 1f b8 19 9b a2 d3 dc     ;.jV..>._.......
     11c:	f8 f9 aa 04 50 03 28 56 b2 f9 6c 45 42 78 e5 ac     ....P.(V..lEBx..
     12c:	6e d1 fa 72 1a a6 6c 64 09 fb 37 87 73 52 93 76     n..r..ld..7.sR.v
     13c:	ef a8 10 73 be be 4f c6 e9 5f ba 52 19 c7 01 b3     ...s..O.._.R....
     14c:	c3 36 55 60 4e d8 fd 87 f8 01 6d 7f 3f 44 21 0a     .6U`N.....m.?D!.
     15c:	fd b7 03 cb e2 a8 f5 da c6 7f 0d 6d 7d 20 0c 4f     ...........m} .O
     16c:	65 9e a6 eb 0c 54 db 66 cb e8 77 34 24 1a e4 92     e....T.f..w4$...
     17c:	83 a1 f9 b1 f0 fe 19 c0 e5 b8 31 49 5f a0 18 46     ..........1I_..F
     18c:	1e a0 a1 f0 b4 3a 54 a3 09 4b e1 f4 8a 36 96 a8     .....:T..K...6..
     19c:	a4 40 22 63 f6 89 5e 55 70 c1 06 9f 0c 0f c3 a7     .@"c..^Up.......
     1ac:	c9 83 66 cb 64 c8 f1 3d e1 90 b3 46 a3 d5 8d f9     ..f.d..=...F....
     1bc:	b1 23 56 07 5d 71 e4 ae 59 c5 43 a5 0d 9f 28 26     .#V.]q..Y.C...(&
     1cc:	93 21 47 98 5d d3 de fb 33 d6 25 a1 1b ff 35 af     .!G.]...3.%...5.
     1dc:	2f 5f 78 c4 c7 f4 1a 14 e3 69 a9 81 03 fc 93 e7     /_x......i......
     1ec:	db 82 04 6c 4c e3 66 dd 35 54 69 f2 e0 32 eb ac     ...lL.f.5Ti..2..
     1fc:	aa 55 8c 68 eb 0a 8f 75 f0 d5 87 ff 16 4a 4e bd     .U.h...u.....JN.
     20c:	dd ed 4b a1 80 93 0a 02 95 0a 22 64 4f c9 28 82     ..K......."dO.(.
     21c:	17 56 7f c4 45 18 c9 ac a7 19 24 49 7e ff 9a 7b     .V..E.....$I~..{
     22c:	91 10 14 33 e1 a6 7b ad 7c 9e 79 5e a0 15 34 c3     ...3..{.|.y^..4.
     23c:	df 9c 4f c0 ac 6f 0d 7e e6 f8 fa 0e 25 16 ea a8     ..O..o.~....%...
     24c:	bf 55 2f d8 4b 62 2a 06 81 93 99 cb 62 1f 7f 85     .U/.Kb*.....b...
     25c:	b2 10 cc c0 28 fd da 7b 16 5a 0a 07 c3 a4 c2 f6     ....(..{.Z......
     26c:	9e 3b 31 aa 50 ed ec 07 3c 7e 57 2d c5 a5 ed 00     .;1.P...<~W-....
     27c:	97 79 01 e9 84 12 f5 0f bd 61 39 04 66 ec 44 0f     .y.......a9.f.D.
     28c:	1f 14 33 04 2d 24 dd 7b fc c0 83 23 27 76 6f 50     ..3.-$.{...#'voP
     29c:	26 4e d8 cb 67 55 68 22 c3 27 18 f1 3a e8 43 85     &N..gUh".'..:.C.
     2ac:	55 63 14 d0 6a 07 b5 66 fa 28 c8 5a 89 dc cb c2     Uc..j..f.(.Z....
     2bc:	02 3f 51 4b c4 d2 ce b9 05 27 71 0f 35 1d 50 e7     .?QK.....'q.5.P.
     2cc:	78 3b b2 24 af 3d 5a 16 de 7d 4c 9a e3 2d d7 87     x;.$.=Z..}L..-..
     2dc:	2e 21 35 58 d5 7d 4c 40 d0 13 60 7b 50 80 18 cd     .!5X.}L@..`{P...
     2ec:	89 11 51 c7 fb b7 88 11 f4 21 54 88 37 ad 8c b2     ..Q......!T.7...
     2fc:	87 0f 69 9e a4 ea aa 1c b9 a3 c0 bb 01 dd 00 d7     ..i.............
     30c:	a9 cc 99 84 2b 91 41 70 aa 56 8c e5 bd 48 d1 d4     ....+.Ap.V...H..
     31c:	09 c0 81 55 c9 64 0b 95 fb d6 84 95 39 1b da 7a     ...U.d......9..z
     32c:	e8 86 d9 ed bc e2 f2 08 9e 17 ee 3a 10 b6 7c b9     ...........:..|.
     33c:	32 e4 a2 12 d6 c9 ce 95 b8 aa 46 47 da 4f 1e e8     2.........FG.O..
     34c:	b0 91 d0 96 8c ee 1d 84 7c 11 c2 c7 ab 99 f1 61     ........|......a
     35c:	e5 ce d9 0e 79 4e d9 29 f5 11 61 11 84 da 0d 5b     ....yN.)..a....[
     36c:	73 0c 5b a2 99 ba ab ae f6 9b 57 19 3c d6 1d 74     s.[.......W.<..t
     37c:	01 0d 1b f8 ec e3 5d 00 75 c0 2b 40 aa f7 e4 fd     ......].u.+@....
     38c:	da 96 0a a4 37 42 b3 3f 6d 57 1f 7f 09 e7 93 f0     ....7B.?mW......
     39c:	03 74 c4 7b ae fa a5 4b 10 d0 dd d8 90 26 2e df     .t.{...K.....&..
     3ac:	9b 4b f6 04 47 f6 3e d0 a2 6b 49 22 8f 5c 9e 32     .K..G.>..kI".\.2
     3bc:	65 cd d1 3f 60 dd 74 f4 32 bf a5 1e 16 c7 98 1a     e..?`.t.2.......
     3cc:	c7 9c 9d 08 68 13 30 3e 40 0d 8a b4 be 5d bc fc     ....h.0>@....]..
     3dc:	6d 84 d4 25 bf 5b e0 f1 fd a4 a1 17 25 fb 82 70     m..%.[......%..p
     3ec:	3e 5d 1a 52 48 51 a8 fc e2 be 4a 25 3e 08 af 5e     >].RHQ....J%>..^
     3fc:	1e 5e 50 61 08 bc 38 55 bd 89 a1 91 2f 27 c9 22     .^Pa..8U..../'."
     40c:	79 4e 4d 16 0d 3a 53 c4 8b 33 28 c6 78 78 87 0f     yNM..:S..3(.xx..
     41c:	f8 52 83 4c 6a 73 f5 35 44 ee d9 a4 b4 63 81 66     .R.Ljs.5D....c.f
     42c:	da 12 3a 12 40 96 88 0a 72 a1 54 71 e1 7e af f7     ..:.@...r.Tq.~..
     43c:	99 12 e3 85 7d 6f d2 46 d2 eb 1c ff 9b fc 2f c8     ....}o.F....../.
     44c:	27 9f 0b 3a 35 bd e8 57 64 c8 a9 c3 6d 86 90 0c     '..:5..Wd...m...
     45c:	15 c9 03 b6 c2 4e 9b cb b7 11 19 b3 b6 6c 6e 27     .....N.......ln'
     46c:	25 ef c3 a4 4b 5f 1c c5 aa 03 eb 3a 59 92 f3 47     %...K_.....:Y..G
     47c:	9d 59 d4 74 e9 8f e7 2e cc b8 10 14 ef a6 45 2c     .Y.t..........E,
     48c:	42 2d 75 54 f8 31 72 c4 bf 3f b5 f1 5f 52 84 e5     B-uT.1r..?.._R..
     49c:	7e 21 9f 15 09 32 b3 c7 88 fa 84 48 c6 ac b5 ff     ~!...2.....H....
     4ac:	99 48 43 a6 9b f6 fa 20 ce dc bb ac 59 5f 3b 84     .HC.... ....Y_;.
     4bc:	09 c5 4a 82 d0 4f 19 3c e7 7f 3e 6e ad dc 69 71     ..J..O.<..>n..iq
     4cc:	2d 68 58 b0 40 86 8f 1d 3e 13 d1 d1 77 ba 93 f1     -hX.@...>...w...
     4dc:	13 77 b5 2b 3e 21 91 2f 81 b0 a8 50 61 a5 49 f0     .w.+>!./...Pa.I.
     4ec:	c5 a5 dc 4c d1 b7 e8 f3 fc c8 1b 24 49 75 98 a3     ...L.......$Iu..
     4fc:	66 2a c7 8b 37 14 0f 1c 7b 04 0b 7b 3d 30 52 a7     f*..7...{..{=0R.
     50c:	7c 9f 28 8d 86 2e 69 e8 d1 9f 68 6d c6 d9 4b 5c     |.(...i...hm..K\
     51c:	17 ca ea 7d 9e 84 8e c6 5e 47 8f 02 63 24 ad 44     ...}....^G..c$.D
     52c:	a8 2d 2d ed a1 c5 02 f4 0b 7c 3b 74 6a f3 05 5e     .--......|;tj..^
     53c:	9c 8c 7d 7b 47 00 29 3c 13 01 19 2e b1 b3 95 6c     ..}{G.)<.......l
     54c:	02 a2 c6 29 5d d5 6b 43 c2 a3 3c db 6e 16 e5 d5     ...)].kC..<.n...
     55c:	98 ca 44 4f 8d 7f 0b 75 0e a7 6e 49 e7 f7 bf ea     ..DO...u..nI....
     56c:	53 7b 30 9b 50 7d d3 53 01 06 0d ac 5a 42 47 1e     S{0.P}.S....ZBG.
     57c:	49 96 4b 87 82 a4 9f 2a af 9f 6d fb 77 a7 f9 80     I.K....*..m.w...
     58c:	34 6d 6d 88 55 bf 67 ce fe b1 d5 b9 67 ea 82 77     4mm.U.g.....g..w
     59c:	ab bb 9b 84 39 1d 25 5b 24 f1 ca f7 0b 99 6f 9b     ....9.%[$.....o.
     5ac:	6f 04 76 b1 30 ba 55 25 4f 0f 05 53 bb 52 64 23     o.v.0.U%O..S.Rd#
     5bc:	49 e2 ac a8 4d 4a 9e 3c fc 46 74 38 cf d7 7f 11     I...MJ.<.Ft8....
     5cc:	ff 67 4b 1f c5 aa c1 d6 1c 06 8e c7 18 68 23 62     .gK..........h#b
     5dc:	bb 87 b2 12 df f3 fd 7d 01 60 72 5e 72 56 17 a7     .......}.`r^rV..
     5ec:	99 bb eb 0f 4d 4a cd d3 e1 07 86 e6 cf 81 49 e5     ....MJ........I.
     5fc:	21 43 5d 7b e3 4b 8e 34 2f 7a bc 92 67 51 a8 44     !C]{.K.4/z..gQ.D
     60c:	63 c7 55 6b 03 11 fa c5 8e 46 a3 53 fd b7 79 89     c.Uk.....F.S..y.
     61c:	1e 0c 43 a8 df eb 5d 7c 43 b2 a3 ae 26 3a b0 df     ..C...]|C...&:..
     62c:	8a b0 ad 83 55 3a 2d 93 61 07 86 c7 ec 47 c5 1c     ....U:-.a....G..
     63c:	b2 00 df 06 28 0e 86 ed 9b 3b 33 fb b6 62 a3 65     ....(....;3..b.e
     64c:	37 5d c4 b0 f7 d1 ce a5 cb ef f6 8a b0 28 9b 75     7]...........(.u
     65c:	b5 e0 d4 43 e2 78 2d 9f 83 b9 93 44 83 64 70 a2     ...C.x-....D.dp.
     66c:	4c d8 b6 4f 93 5c a1 34 34 00 39 64 30 52 15 12     L..O.\.44.9d0R..
     67c:	2d dd 7f b6 86 6e 43 ec af b5 2a f5 88 d1 83 47     -....nC...*....G
     68c:	ee 51 db 9e 5a 50 e8 1b 75 b5 01 96 c7 0e 3f 18     .Q..ZP..u.....?.
     69c:	90 20 e2 a0 24 56 8c fe 5e ce 98 6d b9 a9 f8 d7     . ..$V..^..m....
     6ac:	c0 3c 35 78 4e 93 4d 80 5a 33 91 18 eb 8b 66 31     .<5xN.M.Z3....f1
     6bc:	5a a7 b4 80 82 6a 89 be 4f 60 ee 70 15 11 c4 7f     Z....j..O`.p....
     6cc:	44 4c 80 de 85 3e 59 2f 14 2f bb 50 ee 18 ae 68     DL...>Y/./.P...h
     6dc:	15 1a b4 ce f3 46 c8 01 e3 c3 b2 ae 9d 51 84 ed     .....F.......Q..
     6ec:	1f 15 cf e1 f6 29 22 a5 c2 96 8c 93 06 b5 5b 72     .....)".......[r
     6fc:	78 ca 37 d2 fc 38 c2 c3 04 7b f2 83 f0 f5 6b d9     x.7..8...{....k.
     70c:	0f 4a dd 60 6a 4e e9 08 9b f4 e3 3f 2b 0e aa b7     .J.`jN.....?+...
     71c:	ec 4e 93 a1 2e 86 0d f2 88 c3 a6 fa 34 2b 95 34     .N..........4+.4
     72c:	90 11 f4 23 e1 c5 b3 82 12 44 c0 19 1b fa 5b 96     ...#.....D....[.
     73c:	da 74 9a 57 e3 60 b6 63 76 9a 40 50 f3 b9 26 10     .t.W.`.cv.@P..&.
     74c:	eb 1e 96 61 e9 59 51 b4 ba 5b cb 4c be df ea 1f     ...a.YQ..[.L....
     75c:	f4 fe bd 9d fe 08 66 93 a2 1a f1 ec 48 81 be 76     ......f.....H..v
     76c:	42 a8 cb 34 01 7a 04 e7 f3 cc b6 fc 6d a4 06 e5     B..4.z......m...
     77c:	ea bc 35 9c 4c 23 b3 f2 a8 09 7b 21 c6 8d f2 98     ..5.L#....{!....
     78c:	33 2b d1 f7 72 f9 5b 11 d9 75 2f 93 fc b9 b9 a8     3+..r.[..u/.....
     79c:	a8 5e 88 3a cf cd 24 3c e2 96 ed 63 d6 dd 22 0c     .^.:..$<...c..".
     7ac:	43 b0 db c4 17 7b 6c ab 33 1f 74 b8 c7 98 4d 3d     C....{l.3.t...M=
     7bc:	a0 e6 cd cd 98 c6 4f d7 fa 41 a2 91 45 5c f7 f4     ......O..A..E\..
     7cc:	c8 27 6f 08 9b e4 c1 4f 97 bc 12 b5 ca c3 62 b1     .'o....O......b.
     7dc:	39 96 66 bb aa d4 fe 75 1e 25 3c 12 98 2f 7a 0f     9.f....u.%<../z.
     7ec:	69 1b ed ac ba f0 14 00 91 d4 bd aa 0c af 18 43     i..............C
     7fc:	d1 86 68 f0 3b 78 99 46 7e bd b1 e9 63 bb 59 ae     ..h.;x.F~...c.Y.
     80c:	67 61 52 11 29 79 e4 e2 67 ca 1f a5 99 f3 3d f0     gaR.)y..g.....=.
     81c:	a0 1f 90 7e 09 8d cf 4b 57 17 f8 8d 63 8c 55 84     ...~...KW...c.U.
     82c:	d2 03 a1 f9 b1 db 8f 6f 87 46 60 bb a2 fa e1 17     .......o.F`.....
     83c:	ef 46 b4 6a 8c 52 a9 bc 62 23 e1 79 d0 78 ca c2     .F.j.R..b#.y.x..
     84c:	3c 3d a1 2a b6 84 bb cd 46 5f 0b cc 44 40 b7 2f     <=.*....F_..D@./
     85c:	d0 31 31 83 32 44 3d 62 54 5e 16 ed 5d 18 03 00     .11.2D=bT^..]...
     86c:	dc 8d 94 ca f4 28 5b c6 3e 2a e8 52 fb 6d 39 c0     .....([.>*.R.m9.
     87c:	84 6e 06 61 8f d1 6f 34 cf 44 ac 13 01 f8 6f a5     .n.a..o4.D....o.
     88c:	4a ac ea 60 f9 73 b0 46 ce 11 05 d7 f7 fd bf 55     J..`.s.F.......U
     89c:	b5 76 fa 07 19 38 6e d3 68 a7 61 a5 a9 70 17 59     .v...8n.h.a..p.Y
     8ac:	91 59 ba 50 7a a2 61 5f f3 78 ff 57 a0 c8 d9 d4     .Y.Pz.a_.x.W....
     8bc:	f9 b3 8c 7a ab 7c 2e 96 4c 20 3b 9d 30 73 dc 40     ...z.|..L ;.0s.@
     8cc:	ce 94 21 c5 12 fa 20 88 77 fb 1e b5 85 c2 ca 0d     ..!... .w.......
     8dc:	f5 9a 26 11 21 91 80 15 6c 02 d7 b2 28 82 35 01     ..&.!...l...(.5.
     8ec:	75 10 4c 14 ad 94 59 18 fb 93 fb b3 7d 3c 83 21     u.L...Y.....}<.!
     8fc:	ba 44 1d 72 ec d9 54 0a 17 2c 2e 76 1b 9b 36 20     .D.r..T..,.v..6 
     90c:	c4 ed 22 86 63 2e 0a c8 16 d7 08 30 bb 0d a7 a2     ..".c......0....
     91c:	64 35 fe 7d 40 7c fd 14 b2 9c 77 75 e9 38 b3 fd     d5.}@|....wu.8..
     92c:	1c dc 98 cd 0e 5a ef 8c da 33 5b 77 39 d3 a0 2a     .....Z...3[w9..*
     93c:	45 eb 68 33 01 5c 3e 02 04 31 38 63 1a 7f 65 f0     E.h3.\>..18c..e.
     94c:	b5 e7 e3 45 a1 6a 50 df 41 45 95 6d 0a 1e e8 63     ...E.jP.AE.m...c
     95c:	2a b6 1e bb 67 d3 c6 dd 04 c9 92 18 b2 3e 6b ca     *...g........>k.
     96c:	57 0b 0c 4d 10 36 8f 79 62 dd 03 27 ef 18 9c 8d     W..M.6.yb..'....
     97c:	73 cf e5 e7 8e 8c a0 23 3f 60 21 d1 41 54 a6 d5     s......#?`!.AT..
     98c:	49 d4 38 3c 7b de d4 29 12 b5 a0 fa b4 1e 98 92     I.8<{..)........
     99c:	67 eb 89 27 45 43 e2 93 82 66 ee f9 c2 ad 51 2a     g..'EC...f....Q*
     9ac:	d3 d0 e5 49 30 24 62 f8 1a da 3d 0c 9d b9 10 45     ...I0$b...=....E
     9bc:	77 be b7 60 4b c1 26 cf 3c 3c 4f da 7f f3 4a c3     w..`K.&.<<O...J.
     9cc:	22 a6 6e 98 38 9e a0 5b 27 31 62 83 27 4c fc 98     ".n.8..['1b.'L..
     9dc:	5c ba 20 b7 8e 5c 09 2b 4c da f2 81 ea 1d b6 a3     \. ..\.+L.......
     9ec:	9a 6f 6f b3 67 68 00 dd 20 56 4c f9 08 8b 1b f1     .oo.gh.. VL.....
     9fc:	e0 a7 30 62 95 bf 4f 5d b6 1e a2 fc ba ca 77 c9     ..0b..O]......w.
     a0c:	ec fb b6 38 3d fe 76 8a af 01 de c6 f7 bd 56 54     ...8=.v.......VT
     a1c:	b2 54 84 0b fc 57 af eb 29 8a 87 38 8e 91 58 02     .T...W..)..8..X.
     a2c:	23 b2 37 4c 4a 4a ea 03 db de aa 88 6a ba 72 84     #.7LJJ......j.r.
     a3c:	e2 b0 fc 69 23 e1 79 94 1e a8 ad 20 7f de 5a c6     ...i#.y.... ..Z.
     a4c:	ae 1a 5a 83 53 2a 97 85 99 15 81 91 e3 cd c0 69     ..Z.S*.........i
     a5c:	4e d9 9c 7c 23 1e 1d 54 36 d7 72 f7 ba cf 42 8a     N..|#..T6.r...B.
     a6c:	ca 48 2e df a5 c2 21 8c ba 70 37 ea ac 7b 4b 86     .H....!..p7..{K.
     a7c:	d5 2d 78 b7 25 50 f5 82 9f bb c6 8c c2 3e 88 31     .-x.%P.......>.1
     a8c:	e4 ae 0a a9 61 25 04 d2 38 83 e2 8c a3 fb e4 0c     ....a%..8.......
     a9c:	73 5d 47 9c d2 f0 7a 89 dc ac 37 81 f6 a0 8e 0a     s]G...z...7.....
     aac:	7f 11 35 43 b5 62 54 32 19 50 d4 32 19 8a 19 a7     ..5C.bT2.P.2....
     abc:	18 f1 1b aa 26 6f 62 49 e4 b4 48 69 4e eb 02 8a     ....&obI..HiN...
     acc:	32 4b 0d 0d e0 87 db c7 99 4a f7 4d f9 70 43 90     2K.......J.M.pC.
     adc:	9a 33 82 55 23 83 31 42 32 66 db 35 fb 42 4b 1e     .3.U#.1B2f.5.BK.
     aec:	eb f6 f0 b6 dc e9 59 60 ca 94 08 85 6f 0d 5a 00     ......Y`....o.Z.
     afc:	e3 45 fd fb 98 e2 e4 50 5d c8 b1 17 3d ca 10 56     .E.....P]...=..V
     b0c:	2f 9d d1 e7 12 1d d8 b3 0c 37 47 64 dc 3c 21 61     /........7Gd.<!a
     b1c:	ff 17 41 dd 8d 23 eb 0d 4d 90 5a b6 39 39 e4 18     ..A..#..M.Z.99..
     b2c:	54 77 ca fc 71 0c 7c 46 3e 68 56 76 a0 3c 97 a8     Tw..q.|F>hVv.<..
     b3c:	0d 9c e2 a9 17 f1 04 47 e8 0a 79 b5 f3 f8 bc df     .......G..y.....
     b4c:	45 79 28 51 6d 3a 34 bf 98 bc 83 3a 1a d8 2b aa     Ey(Qm:4....:..+.
     b5c:	37 53 bb bc 12 d2 b4 7c aa f3 d2 ba 7f db 9d 12     7S.....|........
     b6c:	35 83 f0 29 37 09 0d e4 6e a5 1e 71 df 03 eb 32     5..)7...n..q...2
     b7c:	8e 4b 8c 74 02 82 3f c8 27 d7 0d 9e 8f 6e dd 93     .K.t..?.'....n..
     b8c:	79 6e c0 c7 24 3e 28 93 81 79 d7 5f b5 0c 08 3d     yn..$>(..y._...=
     b9c:	f9 11 02 06 30 1e 87 38 8c 77 39 0f f3 37 9d 9d     ....0..8.w9..7..
     bac:	c1 c6 18 5c 45 00 06 11 22 35 eb 70 39 e8 33 f6     ...\E..."5.p9.3.
     bbc:	5b b1 31 74 ce 46 8d 12 a9 64 7a 2f b1 d0 1b f7     [.1t.F...dz/....
     bcc:	c0 8e 5b f3 f0 cc 92 42 e0 8e bb e5 23 91 6f 55     ..[....B....#.oU
     bdc:	c1 81 29 85 80 93 2e b9 b9 e4 4d 6c b9 a7 82 8f     ..).......Ml....
     bec:	b9 a8 55 fb fd f3 c5 a6 43 0c 3c 32 13 0a 4b 7b     ..U.....C.<2..K{
     bfc:	ed ba c6 66 8c 55 a5 40 b4 a5 2c ae c1 6c 4e 66     ...f.U.@..,..lNf
     c0c:	99 00 01 c7 6a 82 d8 ca 95 cf 99 85 f7 94 08 d2     ....j...........
     c1c:	6f 08 1b 72 93 4b 58 bd 9e 81 3e 08 5d ac 72 e8     o..r.KX...>.].r.
     c2c:	fa 13 ed 7e 11 c7 73 13 e7 c5 13 ba 98 f1 24 cb     ...~..s.......$.
     c3c:	28 89 36 d3 1d 80 50 6e 57 7c b9 26 4b 36 a4 65     (.6...PnW|.&K6.e
     c4c:	62 ae 92 8e 2f 5f 68 3c a3 f5 31 1b fb cb 7d 4d     b.../_h<..1...}M
     c5c:	67 11 bf fd c0 e9 77 93 9f bd 5f 08 94 aa 65 76     g.....w..._...ev
     c6c:	84 ee 19 6b 71 38 05 1a 3c 3c c5 d2 a7 03 7a c6     ...kq8..<<....z.
     c7c:	69 88 06 c7 ca a3 80 5e aa 91 7a 79 7b bb a7 4e     i......^..zy{..N
     c8c:	f8 90 1a e0 f8 bc 7a cf ae 75 df 7e 58 e1 11 02     ......z..u.~X...
     c9c:	e2 17 21 38 76 c5 fc 0a 15 fd 3a 43 73 68 90 27     ..!8v.....:Csh.'
     cac:	b9 a5 e3 86 2f 65 fa bc 6c d8 34 3b 61 50 35 48     ..../e..l.4;aP5H
     cbc:	02 17 31 21 f2 9f a2 5b d7 46 63 71 79 bf 9c 7c     ..1!...[.Fcqy..|
     ccc:	10 b0 8a 51 16 bd 6f 84 3f 3e f8 92 1e 89 4b da     ...Q..o.?>....K.
     cdc:	2b 8a 6e 27 83 52 72 fc b6 fe 45 cc 53 fc a2 58     +.n'.Rr...E.S..X
     cec:	ca 8d d5 13 00 ea ef e7 f7 b5 50 dd 7a 81 dc 53     ..........P.z..S
     cfc:	91 08 c2 a3 2a 0a 60 ae 08 0c 8c e2 43 13 3e 9e     ....*.`.....C.>.
     d0c:	fc ae 86 c6 9a ff 0d 1c 54 36 1a 9e 4b 8e 6b 2c     ........T6..K.k,
     d1c:	b6 da ac a1 62 4c 45 0b 67 6b 7b c4 cf 96 ed cd     ....bLE.gk{.....
     d2c:	cb 9d d9 9a 27 3e 57 fe 12 6a b3 f0 ce 95 a5 35     ....'>W..j.....5
     d3c:	10 51 c9 4f 89 78 fd e7 05 8f 35 c1 5e cf 91 4e     .Q.O.x....5.^..N
     d4c:	6d db 00 02 43 a5 d9 d3 17 21 3c 30 fe 51 1e 40     m...C....!<0.Q.@
     d5c:	fa 2a 0e 6b 70 3a eb f2 95 60 7c ce f6 e1 9f 14     .*.kp:...`|.....
     d6c:	7d 71 32 ae b6 26 c7 9c 73 60 4a e3 f8 0d 3e 33     }q2..&..s`J...>3
     d7c:	97 40 9f ad c8 a5 fd a9 4e 89 f3 cc 09 ff 32 6e     .@......N.....2n
     d8c:	4f 72 ae 49 db 28 0b fc bb 25 5b 77 02 b2 d9 b6     Or.I.(...%[w....
     d9c:	9d 79 23 aa 7c aa 9a 7f e7 20 c6 e2 17 be 0e 70     .y#.|.... .....p
     dac:	7b 8e 4c 98 96 48 cb 63 fe 51 f4 c9 15 4b cc 2d     {.L..H.c.Q...K.-
     dbc:	ad ba c0 27 34 93 13 fc 23 62 fa 87 35 0b 7e ca     ...'4...#b..5.~.
     dcc:	c0 04 32 e5 bd 1b d0 ba 86 49 ed 9b d2 5e ad 1e     ..2......I...^..
     ddc:	41 a2 7a 22 7e 49 d6 be d9 d3 1a 15 54 c2 68 8d     A.z"~I......T.h.
     dec:	d0 46 ca 67 5e c7 af 9d 3f 2e 22 01 3e 78 0a 27     .F.g^...?.".>x.'
     dfc:	09 08 00 b4 10 5a a6 63 a7 43 3c 18 ce 9e c0 08     .....Z.c.C<.....
     e0c:	c9 40 b5 bb 4f 18 14 fa c1 32 53 13 1e ab 46 cc     .@..O....2S...F.
     e1c:	db d2 de f5 af 83 e3 3c 10 51 e5 72 0e 63 5e e2     .......<.Q.r.c^.
     e2c:	22 45 74 41 ba 85 3b 84 f5 6c 9d ea e5 19 01 94     "EtA..;..l......
     e3c:	35 ff 4c af 5f b7 86 6e be 8e 1d ad 58 96 4f 8d     5.L._..n....X.O.
     e4c:	48 48 c1 56 1c 28 d6 57 4a 9f ff 4c 48 32 f3 41     HH.V.(.WJ..LH2.A
     e5c:	58 fe 35 e8 94 b4 8c ce 6d 6d fb 73 a7 f9 f0 07     X.5.....mm.s....
     e6c:	2e 8b 35 d7 66 0f 7e dc 9a 27 e6 49 cb b2 25 43     ..5.f.~..'.I..%C
     e7c:	1b 25 0e 09 fd 07 58 44 07 42 1e 3f 4c b0 b5 27     .%....XD.B.?L..'
     e8c:	53 77 4f f3 0f ee ff ba cd b9 06 f9 b3 a2 74 96     SwO...........t.
     e9c:	97 a3 ae 9f ae 08 11 cb 2a c5 3a d0 4f a6 4b b6     ........*.:.O.K.
     eac:	65 b6 7f 88 e3 29 6f 88 c5 15 45 86 2f eb 13 95     e....)o...E./...
     ebc:	49 a7 58 90 c5 ba 36 4e dc ee fc d3 ba 4f 0a 67     I.X...6N.....O.g
     ecc:	cb b5 81 90 b4 af a1 37 0e 0a 01 2a 5b d9 06 5f     .......7...*[.._
     edc:	f7 7b bc 32 24 c8 1b 0c cc c1 ef 69 d2 24 27 94     .{.2$......i.$'.
     eec:	bc d9 91 e0 53 f2 99 7e 21 d2 ac a0 b4 42 3f 04     ....S..~!....B?.
     efc:	e9 b1 00 39 c2 33 9d c1 4d 2e 0e 8f 0b e5 73 b4     ...9.3..M.....s.
     f0c:	28 6b d8 84 53 6b c1 39 3e 4c c3 a8 b3 df 98 3b     (k..Sk.9>L.....;
     f1c:	2c 73 fb 8c 30 6a d4 27 3a e8 cc cf d4 1d fa 5b     ,s..0j.':......[
     f2c:	e1 f4 2c 44 cc 87 c4 13 a5 4a f8 80 26 86 f7 0c     ..,D.....J..&...
     f3c:	24 66 ed 36 19 76 86 ec 18 54 e1 25 ab 93 4d fa     $f.6.v...T.%..M.
     f4c:	53 cf 1c bf f8 52 01 72 a4 df fa 07 2f d7 e7 62     S....R.r..../..b
     f5c:	ba c5 15 c0 ac 57 50 ff b6 57 94 92 04 08 78 a9     .....WP..W....x.
     f6c:	0e d1 83 8e 87 f9 1d be 5f 7e 57 f1 85 91 a1 a4     ........_~W.....
     f7c:	45 31 43 ed d5 58 70 69 cb 25 6b 5e f7 89 c8 90     E1C..Xpi.%k^....
     f8c:	8e 78 b0 17 ee 32 10 47 f4 a8 47 77 5e e7 91 9c     .x...2.G..Gw^...
     f9c:	b8 24 75 ce bd f5 9e 5a a6 5c e9 73 f4 19 46 04     .$u....Z.\.s..F.
     fac:	ad b4 24 06 0c 72 2d cf 12 e5 9b ec ba e6 8a af     ..$..r-.........
     fbc:	5e 37 23 87 2b bd 59 72 6f c7 34 48 20 5b 85 f8     ^7#.+.Yro.4H [..
     fcc:	b0 f5 5f 2b fb d6 3d 00 73 14 09 85 da be 2d b8     .._+..=.s.....-.
     fdc:	e6 f6 cd 0c 5e fb 4d 48 43 a7 ba 55 fd f1 b1 71     ....^.MHC..U...q
     fec:	a2 b2 20 e7 d5 dc 01 3b 56 8d 8e 7f 49 28 e6 ed     .. ....;V...I(..
     ffc:	30 1c ae c6 38 51 15 6c 8e a6 fa d5 1e 9d 8d a1     0...8Q.l........
    100c:	f6 cd 10 5e 1c a8 df 55 9d f4 77 fb a4 96 ba d2     ...^...U..w.....
    101c:	24 31 6e 64 30 53 3e 87 a8 31 c2 de 81 e0 53 76     $1nd0S>..1....Sv
    102c:	42 c6 65 2a 97 6a 7a 37 ed 6e 1c b1 c0 69 e3 71     B.e*.jz7.n...i.q
    103c:	77 a1 f7 48 05 52 12 07 4c 0e ca 5c c9 a5 be 23     w..H.R..L..\...#
    104c:	01 de a9 d1 65 bf 3b 4c 04 ce 73 1b 60 15 65 9e     ....e.;L..s.`.e.
    105c:	9a 61 7b 40 63 84 9e 51 3d b4 74 be e9 bc 1c bc     .a{@c..Q=.t.....
    106c:	0c 21 d5 68 92 b2 89 66 2c 74 37 ba 29 06 f3 0d     .!.h...f,t7.)...
    107c:	81 95 20 81 c8 6b 05 05 77 c2 5b e2 89 3f f0 ea     .. ..k..w.[..?..
    108c:	e4 7c b7 65 4d d9 2c 72 55 a6 24 8e 7f 5d 38 d3     .|.eM.,rU.$..]8.
    109c:	05 88 73 64 4a f7 6c 5a 17 8d 38 fb 52 be           ..sdJ.lZ..8.R.

000010aa <descriptor_list>:
    10aa:	00 01 00 00 e1 10 12 00 02 00 00 f3 10 22 00 22     ............."."
    10ba:	00 00 15 11 45 00 21 00 00 05 11 09 00 03 00 00     ....E.!.........
    10ca:	5a 11 04 01 03 09 04 5e 11 10 02 03 09 04 70 11     Z......^......p.
    10da:	0c                                                  .

000010db <endpoint_config_table>:
    10db:	00 00 01 c1 12 00                                   ......

000010e1 <device_descriptor>:
    10e1:	12 01 00 02 00 00 00 40 c0 16 7e 04 00 01 01 02     .......@..~.....
    10f1:	00 01                                               ..

000010f3 <config1_descriptor>:
    10f3:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
    1103:	01 00 09 21 11 01 00 01 22 45 00 07 05 83 03 06     ...!...."E......
    1113:	00 01                                               ..

00001115 <mouse_hid_report_desc>:
    1115:	05 01 09 02 a1 01 05 09 19 01 29 05 15 00 25 01     ..........)...%.
    1125:	95 05 75 01 81 02 95 01 75 03 81 01 05 01 09 30     ..u.....u......0
    1135:	09 31 16 01 80 26 ff 7f 36 01 80 46 ff 7f 75 10     .1...&..6..F..u.
    1145:	95 02 81 06 09 38 15 81 25 7f 35 81 45 7f 75 08     .....8..%.5.E.u.
    1155:	95 01 81 06 c0                                      .....

0000115a <string0>:
    115a:	04 03 09 04                                         ....

0000115e <string1>:
    115e:	10 03 4d 00 66 00 67 00 4e 00 61 00 6d 00 65 00     ..M.f.g.N.a.m.e.
    116e:	00 00                                               ..

00001170 <string2>:
    1170:	0c 03 4d 00 6f 00 75 00 73 00 65 00 00 00           ..M.o.u.s.e...

0000117e <__ctors_end>:
    117e:	11 24       	eor	r1, r1
    1180:	1f be       	out	0x3f, r1	; 63
    1182:	cf ef       	ldi	r28, 0xFF	; 255
    1184:	da e0       	ldi	r29, 0x0A	; 10
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	cd bf       	out	0x3d, r28	; 61

0000118a <__do_copy_data>:
    118a:	11 e0       	ldi	r17, 0x01	; 1
    118c:	a0 e0       	ldi	r26, 0x00	; 0
    118e:	b1 e0       	ldi	r27, 0x01	; 1
    1190:	e8 e5       	ldi	r30, 0x58	; 88
    1192:	f9 e1       	ldi	r31, 0x19	; 25
    1194:	02 c0       	rjmp	.+4      	; 0x119a <.do_copy_data_start>

00001196 <.do_copy_data_loop>:
    1196:	05 90       	lpm	r0, Z+
    1198:	0d 92       	st	X+, r0

0000119a <.do_copy_data_start>:
    119a:	a2 31       	cpi	r26, 0x12	; 18
    119c:	b1 07       	cpc	r27, r17
    119e:	d9 f7       	brne	.-10     	; 0x1196 <.do_copy_data_loop>

000011a0 <__do_clear_bss>:
    11a0:	11 e0       	ldi	r17, 0x01	; 1
    11a2:	a2 e1       	ldi	r26, 0x12	; 18
    11a4:	b1 e0       	ldi	r27, 0x01	; 1
    11a6:	01 c0       	rjmp	.+2      	; 0x11aa <.do_clear_bss_start>

000011a8 <.do_clear_bss_loop>:
    11a8:	1d 92       	st	X+, r1

000011aa <.do_clear_bss_start>:
    11aa:	a4 31       	cpi	r26, 0x14	; 20
    11ac:	b1 07       	cpc	r27, r17
    11ae:	e1 f7       	brne	.-8      	; 0x11a8 <.do_clear_bss_loop>
    11b0:	2a d0       	rcall	.+84     	; 0x1206 <main>
    11b2:	d0 c3       	rjmp	.+1952   	; 0x1954 <_exit>

000011b4 <__bad_interrupt>:
    11b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000011b8 <spi_write>:
	spi_send(0x00);
	return SPDR;
}

static inline void spi_write(const uint8_t address, const uint8_t data) {
	SS_LOW();
    11b8:	28 98       	cbi	0x05, 0	; 5
	spi_send((address) | 0x80);
    11ba:	80 68       	ori	r24, 0x80	; 128
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    11bc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    11be:	0d b4       	in	r0, 0x2d	; 45
    11c0:	07 fe       	sbrs	r0, 7
    11c2:	fd cf       	rjmp	.-6      	; 0x11be <spi_write+0x6>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    11c4:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1<<SPIF)));
    11c6:	0d b4       	in	r0, 0x2d	; 45
    11c8:	07 fe       	sbrs	r0, 7
    11ca:	fd cf       	rjmp	.-6      	; 0x11c6 <spi_write+0xe>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11cc:	80 e5       	ldi	r24, 0x50	; 80
    11ce:	8a 95       	dec	r24
    11d0:	f1 f7       	brne	.-4      	; 0x11ce <spi_write+0x16>
static inline void spi_write(const uint8_t address, const uint8_t data) {
	SS_LOW();
	spi_send((address) | 0x80);
	spi_send(data);
	_delay_us(30);
	SS_HIGH();
    11d2:	28 9a       	sbi	0x05, 0	; 5
}
    11d4:	08 95       	ret

000011d6 <wheel_read>:
	return mask;
}

static inline int8_t wheel_read(void) {
	uint8_t a, b;
	if ((PIN_WHEEL & (1<<WHEEL_A))) {
    11d6:	e6 b1       	in	r30, 0x06	; 6
		a = 1;
	} else {
		a = 0;
	}

	if ((PIN_WHEEL & (1<<WHEEL_B))) {
    11d8:	86 b1       	in	r24, 0x06	; 6
	// https://www.circuitsathome.com/mcu/reading-rotary-encoder-on-arduino

	// Combine old and current A & B to form integer between 0 and 16
	static uint8_t a_b;
	a_b <<= 2;
	a_b |= (((a << 1) | b) & 0x03);
    11da:	e2 95       	swap	r30
    11dc:	e6 95       	lsr	r30
    11de:	e7 70       	andi	r30, 0x07	; 7
    11e0:	88 1f       	adc	r24, r24
    11e2:	88 27       	eor	r24, r24
    11e4:	88 1f       	adc	r24, r24
    11e6:	e2 70       	andi	r30, 0x02	; 2
    11e8:	e8 2b       	or	r30, r24
    11ea:	80 91 12 01 	lds	r24, 0x0112
    11ee:	88 0f       	add	r24, r24
    11f0:	88 0f       	add	r24, r24
    11f2:	e8 2b       	or	r30, r24
    11f4:	e0 93 12 01 	sts	0x0112, r30
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	ef 70       	andi	r30, 0x0F	; 15
    11fc:	f0 70       	andi	r31, 0x00	; 0
    11fe:	e0 50       	subi	r30, 0x00	; 0
    1200:	ff 4f       	sbci	r31, 0xFF	; 255

	static int8_t wheel_states[] = {0,-1,1,0,1,0,0,-1,-1,0,0,1,0,1,-1,0};
	return wheel_states[(a_b & 0x0f)];
}
    1202:	80 81       	ld	r24, Z
    1204:	08 95       	ret

00001206 <main>:
	// Disable Current Timers
	TCCR1B = 0;
	TCNT1 = 0;
}

int main(void) {
    1206:	cf 92       	push	r12
    1208:	df 92       	push	r13
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
	// Set clock prescaler for 8MHz
	CLKPR = 0x80;
    1216:	80 e8       	ldi	r24, 0x80	; 128
    1218:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0x01;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	80 93 61 00 	sts	0x0061, r24
#define WHEEL_B		7


static void pins_init(void) {
	// Button Pins
	DDR_BUTTON &= ~(1<<BUTTON_LEFT); PORT_BUTTON |= (1<<BUTTON_LEFT); // Pullup
    1222:	53 98       	cbi	0x0a, 3	; 10
    1224:	5b 9a       	sbi	0x0b, 3	; 11
	DDR_BUTTON &= ~(1<<BUTTON_MIDDLE); PORT_BUTTON |= (1<<BUTTON_MIDDLE); // Pullup
    1226:	51 98       	cbi	0x0a, 1	; 10
    1228:	59 9a       	sbi	0x0b, 1	; 11
	DDR_BUTTON &= ~(1<<BUTTON_RIGHT); PORT_BUTTON |= (1<<BUTTON_RIGHT); // Pullup
    122a:	50 98       	cbi	0x0a, 0	; 10
    122c:	58 9a       	sbi	0x0b, 0	; 11
	DDR_BUTTON &= ~(1<<BUTTON_FORWARD); PORTD |= (1<<BUTTON_FORWARD); 
    122e:	52 98       	cbi	0x0a, 2	; 10
    1230:	5a 9a       	sbi	0x0b, 2	; 11
	DDR_BUTTON &= ~(1<<BUTTON_BACK); PORTD |= (1<<BUTTON_BACK);
    1232:	54 98       	cbi	0x0a, 4	; 10
    1234:	5c 9a       	sbi	0x0b, 4	; 11

	// Wheel Pins
	DDR_WHEEL &= ~(1<<WHEEL_A); PORT_WHEEL |= (1<<WHEEL_A); // Wheel A pullup
    1236:	3e 98       	cbi	0x07, 6	; 7
    1238:	46 9a       	sbi	0x08, 6	; 8
	DDR_WHEEL &= ~(1<<WHEEL_B); PORT_WHEEL |= (1<<WHEEL_B); // Wheel B pullup
    123a:	3f 98       	cbi	0x07, 7	; 7
    123c:	47 9a       	sbi	0x08, 7	; 8

	// FPC Pins
	DDRB |= (1<<4); PORTB |= (1<<4); // FPC 2 to B 4 High Output
    123e:	24 9a       	sbi	0x04, 4	; 4
    1240:	2c 9a       	sbi	0x05, 4	; 5
    DDRF |= (1<<5); PORTF |= (1<<5); // FPC 12 to F 5 High Output
    1242:	85 9a       	sbi	0x10, 5	; 16
    1244:	8d 9a       	sbi	0x11, 5	; 17
    DDRF &= ~(1<<4); // FPC 13 to F 4 Normal Input
    1246:	84 98       	cbi	0x10, 4	; 16
    DDRF &= ~(1<<1); // FPC 14 to F 1 Normal Input
    1248:	81 98       	cbi	0x10, 1	; 16
    DDRF &= ~(1<<0); PORTF |= (1<<0); // FPC 10, F 0 Pullup Input
    124a:	80 98       	cbi	0x10, 0	; 16
    124c:	88 9a       	sbi	0x11, 0	; 17
	CLKPR = 0x80;
	CLKPR = 0x01;
	
	pins_init();

	usb_init();
    124e:	8d d1       	rcall	.+794    	; 0x156a <usb_init>
	while (!usb_configured());
    1250:	a3 d1       	rcall	.+838    	; 0x1598 <usb_configured>
    1252:	88 23       	and	r24, r24
    1254:	e9 f3       	breq	.-6      	; 0x1250 <main+0x4a>
    1256:	88 e8       	ldi	r24, 0x88	; 136
    1258:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    125a:	28 ec       	ldi	r18, 0xC8	; 200
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	f9 01       	movw	r30, r18
    1260:	31 97       	sbiw	r30, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <main+0x5a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1264:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1266:	d9 f7       	brne	.-10     	; 0x125e <main+0x58>
    DDRF &= ~(1<<0); PORTF |= (1<<0); // FPC 10, F 0 Pullup Input
}

static void spi_init(void) {
	// Initialise SPI comms
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
    1268:	84 b1       	in	r24, 0x04	; 4
    126a:	87 60       	ori	r24, 0x07	; 7
    126c:	84 b9       	out	0x04, r24	; 4
	
	// Set MISO to Pullup Input
	DDR_SPI &= ~(1<<DD_MISO); PORT_SPI |= (1<<DD_MISO); 
    126e:	23 98       	cbi	0x04, 3	; 4
    1270:	2b 9a       	sbi	0x05, 3	; 5

	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
    1272:	8c e5       	ldi	r24, 0x5C	; 92
    1274:	8c bd       	out	0x2c, r24	; 44
static void sensor_init(void) { 
//most of this is just copying the g502 power up procedure "verbatim"
	uint16_t i;
	uint8_t *psrom = srom;

	SS_HIGH();
    1276:	28 9a       	sbi	0x05, 0	; 5
    1278:	80 e7       	ldi	r24, 0x70	; 112
    127a:	97 e1       	ldi	r25, 0x17	; 23
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	f1 f7       	brne	.-4      	; 0x127c <main+0x76>
	_delay_ms(3);

	// Shutdown first
	spi_write(0x3b, 0xb6);
    1280:	8b e3       	ldi	r24, 0x3B	; 59
    1282:	66 eb       	ldi	r22, 0xB6	; 182
    1284:	99 df       	rcall	.-206    	; 0x11b8 <spi_write>
    1286:	88 eb       	ldi	r24, 0xB8	; 184
    1288:	9b e0       	ldi	r25, 0x0B	; 11
    128a:	28 ec       	ldi	r18, 0xC8	; 200
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	f9 01       	movw	r30, r18
    1290:	31 97       	sbiw	r30, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <main+0x8a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1294:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1296:	d9 f7       	brne	.-10     	; 0x128e <main+0x88>
	_delay_ms(300);

	// Drop and raise ncs to reset spi port
	SS_LOW();
    1298:	28 98       	cbi	0x05, 0	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    129a:	8a e6       	ldi	r24, 0x6A	; 106
    129c:	98 2f       	mov	r25, r24
    129e:	9a 95       	dec	r25
    12a0:	f1 f7       	brne	.-4      	; 0x129e <main+0x98>
	_delay_us(40);
	SS_HIGH();
    12a2:	28 9a       	sbi	0x05, 0	; 5
    12a4:	8a 95       	dec	r24
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <main+0x9e>
	_delay_us(40);
	
	// Power up reset
	spi_write(0x3a, 0x5a);
    12a8:	8a e3       	ldi	r24, 0x3A	; 58
    12aa:	6a e5       	ldi	r22, 0x5A	; 90
    12ac:	85 df       	rcall	.-246    	; 0x11b8 <spi_write>
    12ae:	84 ef       	ldi	r24, 0xF4	; 244
    12b0:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12b2:	28 ec       	ldi	r18, 0xC8	; 200
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	f9 01       	movw	r30, r18
    12b8:	31 97       	sbiw	r30, 0x01	; 1
    12ba:	f1 f7       	brne	.-4      	; 0x12b8 <main+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12bc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12be:	d9 f7       	brne	.-10     	; 0x12b6 <main+0xb0>
	_delay_ms(50);
	
	// Flip on and off the clock tuning. not sure purpose...
	spi_write(0x3d, 0x95);
    12c0:	8d e3       	ldi	r24, 0x3D	; 61
    12c2:	65 e9       	ldi	r22, 0x95	; 149
    12c4:	79 df       	rcall	.-270    	; 0x11b8 <spi_write>
    12c6:	80 ed       	ldi	r24, 0xD0	; 208
    12c8:	97 e0       	ldi	r25, 0x07	; 7
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	f1 f7       	brne	.-4      	; 0x12ca <main+0xc4>
	_delay_ms(1);
	spi_write(0x3d, 0x15);
    12ce:	8d e3       	ldi	r24, 0x3D	; 61
    12d0:	65 e1       	ldi	r22, 0x15	; 21
    12d2:	72 df       	rcall	.-284    	; 0x11b8 <spi_write>

	spi_write(0x10, 0x00); //well i know this disables rest mode. not sure purpose
    12d4:	80 e1       	ldi	r24, 0x10	; 16
    12d6:	60 e0       	ldi	r22, 0x00	; 0
    12d8:	6f df       	rcall	.-290    	; 0x11b8 <spi_write>
	spi_write(0x22, 0x00); //???
    12da:	82 e2       	ldi	r24, 0x22	; 34
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	6c df       	rcall	.-296    	; 0x11b8 <spi_write>
	
	//srom download
	spi_write(0x13, 0x1d);
    12e0:	83 e1       	ldi	r24, 0x13	; 19
    12e2:	6d e1       	ldi	r22, 0x1D	; 29
    12e4:	69 df       	rcall	.-302    	; 0x11b8 <spi_write>
    12e6:	80 e2       	ldi	r24, 0x20	; 32
    12e8:	9e e4       	ldi	r25, 0x4E	; 78
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	f1 f7       	brne	.-4      	; 0x12ea <main+0xe4>
	_delay_ms(10);
	spi_write(0x13, 0x18);
    12ee:	83 e1       	ldi	r24, 0x13	; 19
    12f0:	68 e1       	ldi	r22, 0x18	; 24
    12f2:	62 df       	rcall	.-316    	; 0x11b8 <spi_write>
	
	SS_LOW();
    12f4:	28 98       	cbi	0x05, 0	; 5
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    12f6:	82 ee       	ldi	r24, 0xE2	; 226
    12f8:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    12fa:	0d b4       	in	r0, 0x2d	; 45
    12fc:	07 fe       	sbrs	r0, 7
    12fe:	fd cf       	rjmp	.-6      	; 0x12fa <main+0xf4>
    1300:	8c ea       	ldi	r24, 0xAC	; 172
    1302:	90 e0       	ldi	r25, 0x00	; 0
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1304:	3a e2       	ldi	r19, 0x2A	; 42
    1306:	23 2f       	mov	r18, r19
    1308:	2a 95       	dec	r18
    130a:	f1 f7       	brne	.-4      	; 0x1308 <main+0x102>
    130c:	fc 01       	movw	r30, r24
	
	SS_LOW();
	spi_send(0x62 | 0x80);
	for (i = 0; i < SROM_LENGTH; i++) {
		_delay_us(16);
		spi_send(pgm_read_byte(psrom++));
    130e:	01 96       	adiw	r24, 0x01	; 1
    1310:	e4 91       	lpm	r30, Z+
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    1312:	ee bd       	out	0x2e, r30	; 46
	while(!(SPSR & (1<<SPIF)));
    1314:	0d b4       	in	r0, 0x2d	; 45
    1316:	07 fe       	sbrs	r0, 7
    1318:	fd cf       	rjmp	.-6      	; 0x1314 <main+0x10e>
	_delay_ms(10);
	spi_write(0x13, 0x18);
	
	SS_LOW();
	spi_send(0x62 | 0x80);
	for (i = 0; i < SROM_LENGTH; i++) {
    131a:	20 e1       	ldi	r18, 0x10	; 16
    131c:	8a 3a       	cpi	r24, 0xAA	; 170
    131e:	92 07       	cpc	r25, r18
    1320:	91 f7       	brne	.-28     	; 0x1306 <main+0x100>
    1322:	10 e3       	ldi	r17, 0x30	; 48
    1324:	81 2f       	mov	r24, r17
    1326:	8a 95       	dec	r24
    1328:	f1 f7       	brne	.-4      	; 0x1326 <main+0x120>
		_delay_us(16);
		spi_send(pgm_read_byte(psrom++));
	}
	_delay_us(18);
	SS_HIGH();
    132a:	28 9a       	sbi	0x05, 0	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    132c:	80 e9       	ldi	r24, 0x90	; 144
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	f1 f7       	brne	.-4      	; 0x1330 <main+0x12a>
	_delay_us(200);
	
	// Configuration
	spi_write(0x10, 0x00); //0x20 (g502 default) enables rest mode after ~10s of inactivity
    1334:	80 e1       	ldi	r24, 0x10	; 16
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	3f df       	rcall	.-386    	; 0x11b8 <spi_write>
	spi_write(0x14, 0xff); //how long to wait before going to rest mode. 0xff is max (~10 seconds)
    133a:	84 e1       	ldi	r24, 0x14	; 20
    133c:	6f ef       	ldi	r22, 0xFF	; 255
    133e:	3c df       	rcall	.-392    	; 0x11b8 <spi_write>
	spi_write(0x17, 0xff); //???
    1340:	87 e1       	ldi	r24, 0x17	; 23
    1342:	6f ef       	ldi	r22, 0xFF	; 255
    1344:	39 df       	rcall	.-398    	; 0x11b8 <spi_write>
	spi_write(0x18, 0x00); //???
    1346:	88 e1       	ldi	r24, 0x18	; 24
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	36 df       	rcall	.-404    	; 0x11b8 <spi_write>
	spi_write(0x19, 0x00); //???
    134c:	89 e1       	ldi	r24, 0x19	; 25
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	33 df       	rcall	.-410    	; 0x11b8 <spi_write>
	spi_write(0x1b, 0x00); //???
    1352:	8b e1       	ldi	r24, 0x1B	; 27
    1354:	60 e0       	ldi	r22, 0x00	; 0
    1356:	30 df       	rcall	.-416    	; 0x11b8 <spi_write>
	spi_write(0x1c, 0x00); //???
    1358:	8c e1       	ldi	r24, 0x1C	; 28
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	2d df       	rcall	.-422    	; 0x11b8 <spi_write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    135e:	1a 95       	dec	r17
    1360:	f1 f7       	brne	.-4      	; 0x135e <main+0x158>

	// Surface Tuning (default: 0x0a, 0x10)
	_delay_us(18);
	spi_write(0x2c, 0x0a);
    1362:	8c e2       	ldi	r24, 0x2C	; 44
    1364:	6a e0       	ldi	r22, 0x0A	; 10
    1366:	28 df       	rcall	.-432    	; 0x11b8 <spi_write>
	spi_write(0x2b, 0x10);
    1368:	8b e2       	ldi	r24, 0x2B	; 43
    136a:	60 e1       	ldi	r22, 0x10	; 16
    136c:	25 df       	rcall	.-438    	; 0x11b8 <spi_write>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    136e:	08 ee       	ldi	r16, 0xE8	; 232
    1370:	13 e0       	ldi	r17, 0x03	; 3
    1372:	c8 01       	movw	r24, r16
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <main+0x16e>

	// "Manual" Clock Tuning
	_delay_us(500); //arbitrary padding
	spi_write(0x3d, 0x16); //increase this to increase the clock frequency during run mode
    1378:	8d e3       	ldi	r24, 0x3D	; 61
    137a:	66 e1       	ldi	r22, 0x16	; 22
    137c:	1d df       	rcall	.-454    	; 0x11b8 <spi_write>
    137e:	c8 01       	movw	r24, r16
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <main+0x17a>
	_delay_us(500); //arbitrary padding
	spi_write(0x4f, 0x0e); //increase this to increase the clock frequency during rest mode
    1384:	8f e4       	ldi	r24, 0x4F	; 79
    1386:	6e e0       	ldi	r22, 0x0E	; 14
    1388:	17 df       	rcall	.-466    	; 0x11b8 <spi_write>
    138a:	c8 01       	movw	r24, r16
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	f1 f7       	brne	.-4      	; 0x138c <main+0x186>
	_delay_us(500); //arbitrary padding

	// Motion Burst (not sure if necessary)
	spi_write(0x50, 0x00);
    1390:	80 e5       	ldi	r24, 0x50	; 80
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	11 df       	rcall	.-478    	; 0x11b8 <spi_write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1396:	88 e1       	ldi	r24, 0x18	; 24
    1398:	8a 95       	dec	r24
    139a:	f1 f7       	brne	.-4      	; 0x1398 <main+0x192>
	_delay_us(9);
	SS_LOW();
    139c:	28 98       	cbi	0x05, 0	; 5
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    139e:	80 e5       	ldi	r24, 0x50	; 80
    13a0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    13a2:	0d b4       	in	r0, 0x2d	; 45
    13a4:	07 fe       	sbrs	r0, 7
    13a6:	fd cf       	rjmp	.-6      	; 0x13a2 <main+0x19c>
    13a8:	80 e7       	ldi	r24, 0x70	; 112
    13aa:	8a 95       	dec	r24
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <main+0x1a4>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    13ae:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    13b0:	0d b4       	in	r0, 0x2d	; 45
    13b2:	07 fe       	sbrs	r0, 7
    13b4:	fd cf       	rjmp	.-6      	; 0x13b0 <main+0x1aa>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    13b6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    13b8:	0d b4       	in	r0, 0x2d	; 45
    13ba:	07 fe       	sbrs	r0, 7
    13bc:	fd cf       	rjmp	.-6      	; 0x13b8 <main+0x1b2>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    13be:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    13c0:	0d b4       	in	r0, 0x2d	; 45
    13c2:	07 fe       	sbrs	r0, 7
    13c4:	fd cf       	rjmp	.-6      	; 0x13c0 <main+0x1ba>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    13c6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    13c8:	0d b4       	in	r0, 0x2d	; 45
    13ca:	07 fe       	sbrs	r0, 7
    13cc:	fd cf       	rjmp	.-6      	; 0x13c8 <main+0x1c2>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    13ce:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    13d0:	0d b4       	in	r0, 0x2d	; 45
    13d2:	07 fe       	sbrs	r0, 7
    13d4:	fd cf       	rjmp	.-6      	; 0x13d0 <main+0x1ca>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    13d6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    13d8:	0d b4       	in	r0, 0x2d	; 45
    13da:	07 fe       	sbrs	r0, 7
    13dc:	fd cf       	rjmp	.-6      	; 0x13d8 <main+0x1d2>
    13de:	8a e0       	ldi	r24, 0x0A	; 10
    13e0:	8a 95       	dec	r24
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <main+0x1da>
	spi_send(0x00);
	spi_send(0x00);
	spi_send(0x00);
	spi_send(0x00);
	_delay_us(4);
	SS_HIGH();
    13e4:	28 9a       	sbi	0x05, 0	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13e6:	08 ee       	ldi	r16, 0xE8	; 232
    13e8:	13 e0       	ldi	r17, 0x03	; 3
    13ea:	c8 01       	movw	r24, r16
    13ec:	01 97       	sbiw	r24, 0x01	; 1
    13ee:	f1 f7       	brne	.-4      	; 0x13ec <main+0x1e6>
}

uint8_t EEMEM stored_dpi;

static void eeprom_init(void) {
	eeprom_write_byte(&stored_dpi, 0x17);
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	67 e1       	ldi	r22, 0x17	; 23
    13f6:	a0 d2       	rcall	.+1344   	; 0x1938 <__eewr_byte_m32u4>
	uint8_t new_dpi = eeprom_read_byte(&stored_dpi);
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	95 d2       	rcall	.+1322   	; 0x1928 <__eerd_byte_m32u4>
    13fe:	68 2f       	mov	r22, r24
	int8_t data = SPDR;
	return data;
}

static void set_dpi(uint8_t multi) {
	spi_write(0x0f, multi);
    1400:	8f e0       	ldi	r24, 0x0F	; 15
    1402:	da de       	rcall	.-588    	; 0x11b8 <spi_write>
    1404:	c8 01       	movw	r24, r16
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	f1 f7       	brne	.-4      	; 0x1406 <main+0x200>
	//dpi
	eeprom_init();
	_delay_us(500); //arbitrary padding
	
	//motion burst
	spi_write(0x50, 0x00);
    140a:	80 e5       	ldi	r24, 0x50	; 80
    140c:	60 e0       	ldi	r22, 0x00	; 0
    140e:	d4 de       	rcall	.-600    	; 0x11b8 <spi_write>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1410:	88 e1       	ldi	r24, 0x18	; 24
    1412:	8a 95       	dec	r24
    1414:	f1 f7       	brne	.-4      	; 0x1412 <main+0x20c>
	_delay_us(9);
	SS_LOW();
    1416:	28 98       	cbi	0x05, 0	; 5
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    1418:	80 e5       	ldi	r24, 0x50	; 80
    141a:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    141c:	0d b4       	in	r0, 0x2d	; 45
    141e:	07 fe       	sbrs	r0, 7
    1420:	fd cf       	rjmp	.-6      	; 0x141c <main+0x216>
    1422:	80 e7       	ldi	r24, 0x70	; 112
    1424:	8a 95       	dec	r24
    1426:	f1 f7       	brne	.-4      	; 0x1424 <main+0x21e>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    1428:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    142a:	0d b4       	in	r0, 0x2d	; 45
    142c:	07 fe       	sbrs	r0, 7
    142e:	fd cf       	rjmp	.-6      	; 0x142a <main+0x224>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    1430:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    1432:	0d b4       	in	r0, 0x2d	; 45
    1434:	07 fe       	sbrs	r0, 7
    1436:	fd cf       	rjmp	.-6      	; 0x1432 <main+0x22c>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    1438:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    143a:	0d b4       	in	r0, 0x2d	; 45
    143c:	07 fe       	sbrs	r0, 7
    143e:	fd cf       	rjmp	.-6      	; 0x143a <main+0x234>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    1440:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    1442:	0d b4       	in	r0, 0x2d	; 45
    1444:	07 fe       	sbrs	r0, 7
    1446:	fd cf       	rjmp	.-6      	; 0x1442 <main+0x23c>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    1448:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    144a:	0d b4       	in	r0, 0x2d	; 45
    144c:	07 fe       	sbrs	r0, 7
    144e:	fd cf       	rjmp	.-6      	; 0x144a <main+0x244>
	// Enable SPI; master mode, mode 3, & Set Clock Rate fck/4 (2MHz)
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPOL)|(1<<CPHA);
}

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    1450:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    1452:	0d b4       	in	r0, 0x2d	; 45
    1454:	07 fe       	sbrs	r0, 7
    1456:	fd cf       	rjmp	.-6      	; 0x1452 <main+0x24c>
    1458:	8a e0       	ldi	r24, 0x0A	; 10
    145a:	8a 95       	dec	r24
    145c:	f1 f7       	brne	.-4      	; 0x145a <main+0x254>
	spi_send(0x00);
	spi_send(0x00);
	spi_send(0x00);
	spi_send(0x00);
	_delay_us(4);
	SS_HIGH();
    145e:	28 9a       	sbi	0x05, 0	; 5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1460:	08 ee       	ldi	r16, 0xE8	; 232
    1462:	13 e0       	ldi	r17, 0x03	; 3
    1464:	c8 01       	movw	r24, r16
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <main+0x260>
	_delay_us(500); //arbitrary padding
	//angle snapping
	spi_write(0x42, 0x00);
    146a:	82 e4       	ldi	r24, 0x42	; 66
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	a4 de       	rcall	.-696    	; 0x11b8 <spi_write>
    1470:	c8 01       	movw	r24, r16
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <main+0x26c>
	//eeprom_init();

	sensor_init();

	// Configures Prescaler & Timer, Increments every 1/8th microsecond
	TCCR1B |= ((1 << CS10));
    1476:	80 91 81 00 	lds	r24, 0x0081
    147a:	81 60       	ori	r24, 0x01	; 1
    147c:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0; // Reset Timer Count
    1480:	10 92 85 00 	sts	0x0085, r1
    1484:	10 92 84 00 	sts	0x0084, r1

	// Measure Timer Set & Assignment duration
	uint16_t assignment_duration = TCNT1; 
    1488:	00 91 84 00 	lds	r16, 0x0084
    148c:	10 91 85 00 	lds	r17, 0x0085

	uint16_t usb_frame_duration = 8000;
	usb_frame_duration -= assignment_duration;

	// Measure Wheel Polling duration
	TCNT1 = 0; // Reset Timer Count
    1490:	10 92 85 00 	sts	0x0085, r1
    1494:	10 92 84 00 	sts	0x0084, r1
	int8_t wheel = wheel_read();
    1498:	9e de       	rcall	.-708    	; 0x11d6 <wheel_read>
	uint16_t wheel_read_duration = TCNT1; // Snapshot
    149a:	e0 90 84 00 	lds	r14, 0x0084
    149e:	f0 90 85 00 	lds	r15, 0x0085
	wheel_read_duration -= assignment_duration;

	// Measure sensor movement duration
	TCNT1 = 0; // Reset Timer Count
    14a2:	10 92 85 00 	sts	0x0085, r1
    14a6:	10 92 84 00 	sts	0x0084, r1
	fast_usb_mouse_update(0, 0);
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	77 d0       	rcall	.+238    	; 0x159e <fast_usb_mouse_update>

	uint16_t sensor_duration = TCNT1; // Snapshot
    14b0:	80 91 84 00 	lds	r24, 0x0084
    14b4:	90 91 85 00 	lds	r25, 0x0085
	sensor_duration -= assignment_duration; 

	// Offset for while check
	uint16_t pre_sensor_period = ( usb_frame_duration - sensor_duration ) - 32; 
    14b8:	cc 27       	eor	r28, r28
    14ba:	dd 27       	eor	r29, r29
    14bc:	c0 1b       	sub	r28, r16
    14be:	d1 0b       	sbc	r29, r17
    14c0:	c0 5e       	subi	r28, 0xE0	; 224
    14c2:	d0 4e       	sbci	r29, 0xE0	; 224
    14c4:	80 1b       	sub	r24, r16
    14c6:	91 0b       	sbc	r25, r17
    14c8:	c8 1b       	sub	r28, r24
    14ca:	d9 0b       	sbc	r29, r25

	// Offset for clearance
	uint16_t button_period = ( pre_sensor_period - wheel_read_duration ) - 48; 
    14cc:	0e 19       	sub	r16, r14
    14ce:	1f 09       	sbc	r17, r15
    14d0:	00 53       	subi	r16, 0x30	; 48
    14d2:	10 40       	sbci	r17, 0x00	; 0
    14d4:	0c 0f       	add	r16, r28
    14d6:	1d 1f       	adc	r17, r29
		SS_HIGH();

		// Button Read Loop
		uint8_t button_mask = 0;
		while ( TCNT1 < button_period ) {
			button_mask |= button_read();
    14d8:	71 e0       	ldi	r23, 0x01	; 1
    14da:	c7 2e       	mov	r12, r23
    14dc:	d1 2c       	mov	r13, r1
	// Offset for clearance
	uint16_t button_period = ( pre_sensor_period - wheel_read_duration ) - 48; 

	// Main Loop
	while (1) {
		UDINT &= ~(1<<SOFI); // Ack Start of Frame
    14de:	80 91 e1 00 	lds	r24, 0x00E1
    14e2:	8b 7f       	andi	r24, 0xFB	; 251
    14e4:	80 93 e1 00 	sts	0x00E1, r24
		while(!(UDINT & (1<<SOFI))); // Wait until Start Of Frame occurs
    14e8:	80 91 e1 00 	lds	r24, 0x00E1
    14ec:	82 ff       	sbrs	r24, 2
    14ee:	fc cf       	rjmp	.-8      	; 0x14e8 <main+0x2e2>
		TCNT1 = 0; // Reset Timer Count
    14f0:	10 92 85 00 	sts	0x0085, r1
    14f4:	10 92 84 00 	sts	0x0084, r1
		SS_HIGH();
    14f8:	28 9a       	sbi	0x05, 0	; 5
    14fa:	ee 24       	eor	r14, r14
    14fc:	23 c0       	rjmp	.+70     	; 0x1544 <main+0x33e>
}

static inline uint8_t button_read(void) {
	uint8_t mask=0;

	mask |= (!(PIN_BUTTON & (1<<BUTTON_LEFT)) << 0);
    14fe:	89 b1       	in	r24, 0x09	; 9
	mask |= (!(PIN_BUTTON & (1<<BUTTON_MIDDLE)) << 2);
    1500:	49 9b       	sbis	0x09, 1	; 9
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <main+0x302>
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	01 c0       	rjmp	.+2      	; 0x150a <main+0x304>
    1508:	24 e0       	ldi	r18, 0x04	; 4
	mask |= (!(PIN_BUTTON & (1<<BUTTON_RIGHT)) << 1);
    150a:	48 9b       	sbis	0x09, 0	; 9
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <main+0x30c>
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <main+0x30e>
    1512:	52 e0       	ldi	r21, 0x02	; 2
	mask |= (!(PIN_BUTTON & (1<<BUTTON_BACK)) << 3);
    1514:	4c 9b       	sbis	0x09, 4	; 9
    1516:	02 c0       	rjmp	.+4      	; 0x151c <main+0x316>
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	01 c0       	rjmp	.+2      	; 0x151e <main+0x318>
    151c:	48 e0       	ldi	r20, 0x08	; 8
	mask |= (!(PIN_BUTTON & (1<<BUTTON_FORWARD)) << 4);
    151e:	4a 9b       	sbis	0x09, 2	; 9
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <main+0x320>
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <main+0x322>
    1526:	30 e1       	ldi	r19, 0x10	; 16
		SS_HIGH();

		// Button Read Loop
		uint8_t button_mask = 0;
		while ( TCNT1 < button_period ) {
			button_mask |= button_read();
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	63 e0       	ldi	r22, 0x03	; 3
    152c:	96 95       	lsr	r25
    152e:	87 95       	ror	r24
    1530:	6a 95       	dec	r22
    1532:	e1 f7       	brne	.-8      	; 0x152c <main+0x326>
    1534:	8c 25       	eor	r24, r12
    1536:	9d 25       	eor	r25, r13
    1538:	81 70       	andi	r24, 0x01	; 1
    153a:	28 2b       	or	r18, r24
    153c:	25 2b       	or	r18, r21
    153e:	24 2b       	or	r18, r20
    1540:	23 2b       	or	r18, r19
    1542:	e2 2a       	or	r14, r18
		TCNT1 = 0; // Reset Timer Count
		SS_HIGH();

		// Button Read Loop
		uint8_t button_mask = 0;
		while ( TCNT1 < button_period ) {
    1544:	80 91 84 00 	lds	r24, 0x0084
    1548:	90 91 85 00 	lds	r25, 0x0085
    154c:	80 17       	cp	r24, r16
    154e:	91 07       	cpc	r25, r17
    1550:	b0 f2       	brcs	.-84     	; 0x14fe <main+0x2f8>
			button_mask |= button_read();
		}

		// Wheel Read
		int8_t wheel = wheel_read();
    1552:	41 de       	rcall	.-894    	; 0x11d6 <wheel_read>
    1554:	68 2f       	mov	r22, r24

		while ( TCNT1 < pre_sensor_period ); // Wait to align Sensor Read
    1556:	80 91 84 00 	lds	r24, 0x0084
    155a:	90 91 85 00 	lds	r25, 0x0085
    155e:	8c 17       	cp	r24, r28
    1560:	9d 07       	cpc	r25, r29
    1562:	c8 f3       	brcs	.-14     	; 0x1556 <main+0x350>
		fast_usb_mouse_update( button_mask , wheel );
    1564:	8e 2d       	mov	r24, r14
    1566:	1b d0       	rcall	.+54     	; 0x159e <fast_usb_mouse_update>
    1568:	ba cf       	rjmp	.-140    	; 0x14de <main+0x2d8>

0000156a <usb_init>:


// initialize USB
void usb_init(void)
{
	HW_CONFIG();
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	80 93 d7 00 	sts	0x00D7, r24
	USB_FREEZE();				// enable USB
    1570:	80 ea       	ldi	r24, 0xA0	; 160
    1572:	80 93 d8 00 	sts	0x00D8, r24
	PLL_CONFIG();				// config PLL
    1576:	82 e1       	ldi	r24, 0x12	; 18
    1578:	89 bd       	out	0x29, r24	; 41
        while (!(PLLCSR & (1<<PLOCK))) ;	// wait for PLL lock
    157a:	09 b4       	in	r0, 0x29	; 41
    157c:	00 fe       	sbrs	r0, 0
    157e:	fd cf       	rjmp	.-6      	; 0x157a <usb_init+0x10>
        USB_CONFIG();				// start USB clock
    1580:	80 e9       	ldi	r24, 0x90	; 144
    1582:	80 93 d8 00 	sts	0x00D8, r24
        UDCON = 0;				// enable attach resistor
    1586:	10 92 e0 00 	sts	0x00E0, r1
	usb_configuration = 0;
    158a:	10 92 13 01 	sts	0x0113, r1
        UDIEN = (1<<EORSTE);
    158e:	88 e0       	ldi	r24, 0x08	; 8
    1590:	80 93 e2 00 	sts	0x00E2, r24
	sei();
    1594:	78 94       	sei
}
    1596:	08 95       	ret

00001598 <usb_configured>:

// return 0 if the USB is not configured, or the configuration
// number selected by the HOST
uint8_t usb_configured(void)
{
	return usb_configuration;
    1598:	80 91 13 01 	lds	r24, 0x0113
}
    159c:	08 95       	ret

0000159e <fast_usb_mouse_update>:
		SS_HIGH();
}

// Move the mouse.  x, y are -32,767 to 32,767 and wheel is -127 to 127.  Use 0 for no movement.
void fast_usb_mouse_update(const uint8_t button_mask, const int8_t wheel)
{
    159e:	98 2f       	mov	r25, r24
	uint8_t intr_state, timeout;
	intr_state = SREG;
    15a0:	2f b7       	in	r18, 0x3f	; 63
	cli();
    15a2:	f8 94       	cli
	UENUM = MOUSE_ENDPOINT;
    15a4:	83 e0       	ldi	r24, 0x03	; 3
    15a6:	80 93 e9 00 	sts	0x00E9, r24
	spi_send(0x00);
	return SPDR;
}

static inline void spi_reg_write(const uint8_t address, const uint8_t data) {
		SS_LOW();
    15aa:	28 98       	cbi	0x05, 0	; 5

#define SS_LOW(void)	(PORT_SPI &= ~(1<<DD_SS))
#define SS_HIGH(void)	(PORT_SPI |= (1<<DD_SS))

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    15ac:	80 ed       	ldi	r24, 0xD0	; 208
    15ae:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    15b0:	0d b4       	in	r0, 0x2d	; 45
    15b2:	07 fe       	sbrs	r0, 7
    15b4:	fd cf       	rjmp	.-6      	; 0x15b0 <fast_usb_mouse_update+0x12>

#define SS_LOW(void)	(PORT_SPI &= ~(1<<DD_SS))
#define SS_HIGH(void)	(PORT_SPI |= (1<<DD_SS))

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    15b6:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    15b8:	0d b4       	in	r0, 0x2d	; 45
    15ba:	07 fe       	sbrs	r0, 7
    15bc:	fd cf       	rjmp	.-6      	; 0x15b8 <fast_usb_mouse_update+0x1a>
static inline void spi_reg_write(const uint8_t address, const uint8_t data) {
		SS_LOW();
		spi_send((address) | 0x80);
		spi_send(data);
		//_delay_us(30);
		SS_HIGH();
    15be:	28 9a       	sbi	0x05, 0	; 5
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15c0:	8a e0       	ldi	r24, 0x0A	; 10
    15c2:	8a 95       	dec	r24
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <fast_usb_mouse_update+0x24>
	intr_state = SREG;
	cli();
	UENUM = MOUSE_ENDPOINT;
	spi_reg_write(0x50, 0x00);
	_delay_us(4);
	SS_LOW();
    15c6:	28 98       	cbi	0x05, 0	; 5

#define SS_LOW(void)	(PORT_SPI &= ~(1<<DD_SS))
#define SS_HIGH(void)	(PORT_SPI |= (1<<DD_SS))

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    15c8:	80 e5       	ldi	r24, 0x50	; 80
    15ca:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));
    15cc:	0d b4       	in	r0, 0x2d	; 45
    15ce:	07 fe       	sbrs	r0, 7
    15d0:	fd cf       	rjmp	.-6      	; 0x15cc <fast_usb_mouse_update+0x2e>
    15d2:	8a e0       	ldi	r24, 0x0A	; 10
    15d4:	8a 95       	dec	r24
    15d6:	f1 f7       	brne	.-4      	; 0x15d4 <fast_usb_mouse_update+0x36>

#define SS_LOW(void)	(PORT_SPI &= ~(1<<DD_SS))
#define SS_HIGH(void)	(PORT_SPI |= (1<<DD_SS))

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    15d8:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    15da:	0d b4       	in	r0, 0x2d	; 45
    15dc:	07 fe       	sbrs	r0, 7
    15de:	fd cf       	rjmp	.-6      	; 0x15da <fast_usb_mouse_update+0x3c>
}


static inline uint8_t spi_receive(void) {
	spi_send(0x00);
	return SPDR;
    15e0:	8e b5       	in	r24, 0x2e	; 46

#define SS_LOW(void)	(PORT_SPI &= ~(1<<DD_SS))
#define SS_HIGH(void)	(PORT_SPI |= (1<<DD_SS))

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    15e2:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    15e4:	0d b4       	in	r0, 0x2d	; 45
    15e6:	07 fe       	sbrs	r0, 7
    15e8:	fd cf       	rjmp	.-6      	; 0x15e4 <fast_usb_mouse_update+0x46>
}


static inline uint8_t spi_receive(void) {
	spi_send(0x00);
	return SPDR;
    15ea:	8e b5       	in	r24, 0x2e	; 46
	SS_LOW();
	spi_send(0x50);
	_delay_us(4);
	spi_receive();				// Motion
	spi_receive();				// Observation
	UEDATX = button_mask;
    15ec:	90 93 f1 00 	sts	0x00F1, r25

#define SS_LOW(void)	(PORT_SPI &= ~(1<<DD_SS))
#define SS_HIGH(void)	(PORT_SPI |= (1<<DD_SS))

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    15f0:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    15f2:	0d b4       	in	r0, 0x2d	; 45
    15f4:	07 fe       	sbrs	r0, 7
    15f6:	fd cf       	rjmp	.-6      	; 0x15f2 <fast_usb_mouse_update+0x54>
}


static inline uint8_t spi_receive(void) {
	spi_send(0x00);
	return SPDR;
    15f8:	8e b5       	in	r24, 0x2e	; 46
	spi_send(0x50);
	_delay_us(4);
	spi_receive();				// Motion
	spi_receive();				// Observation
	UEDATX = button_mask;
	UEDATX = spi_receive(); 	// X Lower
    15fa:	80 93 f1 00 	sts	0x00F1, r24

#define SS_LOW(void)	(PORT_SPI &= ~(1<<DD_SS))
#define SS_HIGH(void)	(PORT_SPI |= (1<<DD_SS))

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    15fe:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    1600:	0d b4       	in	r0, 0x2d	; 45
    1602:	07 fe       	sbrs	r0, 7
    1604:	fd cf       	rjmp	.-6      	; 0x1600 <fast_usb_mouse_update+0x62>
}


static inline uint8_t spi_receive(void) {
	spi_send(0x00);
	return SPDR;
    1606:	8e b5       	in	r24, 0x2e	; 46
	_delay_us(4);
	spi_receive();				// Motion
	spi_receive();				// Observation
	UEDATX = button_mask;
	UEDATX = spi_receive(); 	// X Lower
	UEDATX = spi_receive();		// X Upper
    1608:	80 93 f1 00 	sts	0x00F1, r24

#define SS_LOW(void)	(PORT_SPI &= ~(1<<DD_SS))
#define SS_HIGH(void)	(PORT_SPI |= (1<<DD_SS))

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    160c:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    160e:	0d b4       	in	r0, 0x2d	; 45
    1610:	07 fe       	sbrs	r0, 7
    1612:	fd cf       	rjmp	.-6      	; 0x160e <fast_usb_mouse_update+0x70>
}


static inline uint8_t spi_receive(void) {
	spi_send(0x00);
	return SPDR;
    1614:	8e b5       	in	r24, 0x2e	; 46
	spi_receive();				// Motion
	spi_receive();				// Observation
	UEDATX = button_mask;
	UEDATX = spi_receive(); 	// X Lower
	UEDATX = spi_receive();		// X Upper
	UEDATX = spi_receive(); 	// Y Lower
    1616:	80 93 f1 00 	sts	0x00F1, r24

#define SS_LOW(void)	(PORT_SPI &= ~(1<<DD_SS))
#define SS_HIGH(void)	(PORT_SPI |= (1<<DD_SS))

static inline void spi_send(const uint8_t byte) {
	SPDR = (byte);
    161a:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1<<SPIF)));
    161c:	0d b4       	in	r0, 0x2d	; 45
    161e:	07 fe       	sbrs	r0, 7
    1620:	fd cf       	rjmp	.-6      	; 0x161c <fast_usb_mouse_update+0x7e>
}


static inline uint8_t spi_receive(void) {
	spi_send(0x00);
	return SPDR;
    1622:	8e b5       	in	r24, 0x2e	; 46
	spi_receive();				// Observation
	UEDATX = button_mask;
	UEDATX = spi_receive(); 	// X Lower
	UEDATX = spi_receive();		// X Upper
	UEDATX = spi_receive(); 	// Y Lower
	UEDATX = spi_receive(); 	// Y Upper
    1624:	80 93 f1 00 	sts	0x00F1, r24
	UEDATX = wheel;
    1628:	60 93 f1 00 	sts	0x00F1, r22
	UEINTX = 0x3A;
    162c:	8a e3       	ldi	r24, 0x3A	; 58
    162e:	80 93 e8 00 	sts	0x00E8, r24
	SREG = intr_state;
    1632:	2f bf       	out	0x3f, r18	; 63
}
    1634:	08 95       	ret

00001636 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1636:	1f 92       	push	r1
    1638:	0f 92       	push	r0
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	0f 92       	push	r0
    163e:	11 24       	eor	r1, r1
    1640:	8f 93       	push	r24
	uint8_t intbits;

        intbits = UDINT;
    1642:	80 91 e1 00 	lds	r24, 0x00E1
        UDINT = 0;
    1646:	10 92 e1 00 	sts	0x00E1, r1
        if (intbits & (1<<EORSTI)) {
    164a:	83 ff       	sbrs	r24, 3
    164c:	0f c0       	rjmp	.+30     	; 0x166c <__vector_10+0x36>
		UENUM = 0;
    164e:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 93 eb 00 	sts	0x00EB, r24
		UECFG0X = EP_TYPE_CONTROL;
    1658:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    165c:	82 e3       	ldi	r24, 0x32	; 50
    165e:	80 93 ed 00 	sts	0x00ED, r24
		UEIENX = (1<<RXSTPE);
    1662:	88 e0       	ldi	r24, 0x08	; 8
    1664:	80 93 f0 00 	sts	0x00F0, r24
		usb_configuration = 0;
    1668:	10 92 13 01 	sts	0x0113, r1
        }
}
    166c:	8f 91       	pop	r24
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	0f 90       	pop	r0
    1674:	1f 90       	pop	r1
    1676:	18 95       	reti

00001678 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1678:	1f 92       	push	r1
    167a:	0f 92       	push	r0
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	0f 92       	push	r0
    1680:	11 24       	eor	r1, r1
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	2f 93       	push	r18
    1688:	3f 93       	push	r19
    168a:	4f 93       	push	r20
    168c:	5f 93       	push	r21
    168e:	6f 93       	push	r22
    1690:	7f 93       	push	r23
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	af 93       	push	r26
    1698:	bf 93       	push	r27
    169a:	ef 93       	push	r30
    169c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    169e:	10 92 e9 00 	sts	0x00E9, r1
	intbits = UEINTX;
    16a2:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    16a6:	83 ff       	sbrs	r24, 3
    16a8:	29 c1       	rjmp	.+594    	; 0x18fc <__vector_11+0x284>
                bmRequestType = UEDATX;
    16aa:	40 91 f1 00 	lds	r20, 0x00F1
                bRequest = UEDATX;
    16ae:	30 91 f1 00 	lds	r19, 0x00F1
                wValue = UEDATX;
    16b2:	80 91 f1 00 	lds	r24, 0x00F1
    16b6:	68 2f       	mov	r22, r24
    16b8:	70 e0       	ldi	r23, 0x00	; 0
                wValue |= (UEDATX << 8);
    16ba:	20 91 f1 00 	lds	r18, 0x00F1
    16be:	92 2f       	mov	r25, r18
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	68 2b       	or	r22, r24
    16c4:	79 2b       	or	r23, r25
                wIndex = UEDATX;
    16c6:	80 91 f1 00 	lds	r24, 0x00F1
    16ca:	a8 2f       	mov	r26, r24
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
                wIndex |= (UEDATX << 8);
    16ce:	20 91 f1 00 	lds	r18, 0x00F1
    16d2:	92 2f       	mov	r25, r18
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	a8 2b       	or	r26, r24
    16d8:	b9 2b       	or	r27, r25
                wLength = UEDATX;
    16da:	10 91 f1 00 	lds	r17, 0x00F1
                wLength |= (UEDATX << 8);
    16de:	00 91 f1 00 	lds	r16, 0x00F1
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    16e2:	82 ef       	ldi	r24, 0xF2	; 242
    16e4:	80 93 e8 00 	sts	0x00E8, r24
                if (bRequest == GET_DESCRIPTOR) {
    16e8:	36 30       	cpi	r19, 0x06	; 6
    16ea:	09 f0       	breq	.+2      	; 0x16ee <__vector_11+0x76>
    16ec:	5a c0       	rjmp	.+180    	; 0x17a2 <__vector_11+0x12a>
    16ee:	21 eb       	ldi	r18, 0xB1	; 177
    16f0:	30 e1       	ldi	r19, 0x10	; 16
    16f2:	a9 01       	movw	r20, r18
    16f4:	45 50       	subi	r20, 0x05	; 5
    16f6:	50 40       	sbci	r21, 0x00	; 0
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
    16f8:	f9 01       	movw	r30, r18
    16fa:	37 97       	sbiw	r30, 0x07	; 7
				}
				desc_val = pgm_read_word(list);
    16fc:	85 91       	lpm	r24, Z+
    16fe:	94 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    1700:	86 17       	cp	r24, r22
    1702:	97 07       	cpc	r25, r23
    1704:	01 f5       	brne	.+64     	; 0x1746 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct);
					continue;
				}
				list += 2;
				desc_val = pgm_read_word(list);
    1706:	fa 01       	movw	r30, r20
    1708:	85 91       	lpm	r24, Z+
    170a:	94 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    170c:	8a 17       	cp	r24, r26
    170e:	9b 07       	cpc	r25, r27
    1710:	d1 f4       	brne	.+52     	; 0x1746 <__vector_11+0xce>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				list += 2;
    1712:	9a 01       	movw	r18, r20
    1714:	2e 5f       	subi	r18, 0xFE	; 254
    1716:	3f 4f       	sbci	r19, 0xFF	; 255
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1718:	f9 01       	movw	r30, r18
    171a:	65 91       	lpm	r22, Z+
    171c:	74 91       	lpm	r23, Z+
				list += 2;
				desc_length = pgm_read_byte(list);
    171e:	2e 5f       	subi	r18, 0xFE	; 254
    1720:	3f 4f       	sbci	r19, 0xFF	; 255
    1722:	f9 01       	movw	r30, r18
    1724:	44 91       	lpm	r20, Z+
                bRequest = UEDATX;
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
    1726:	21 2f       	mov	r18, r17
    1728:	30 e0       	ldi	r19, 0x00	; 0
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    172a:	90 2f       	mov	r25, r16
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	28 2b       	or	r18, r24
    1730:	39 2b       	or	r19, r25
    1732:	2f 3f       	cpi	r18, 0xFF	; 255
    1734:	31 05       	cpc	r19, r1
    1736:	19 f0       	breq	.+6      	; 0x173e <__vector_11+0xc6>
    1738:	10 f0       	brcs	.+4      	; 0x173e <__vector_11+0xc6>
    173a:	2f ef       	ldi	r18, 0xFF	; 255
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	24 17       	cp	r18, r20
    1740:	58 f4       	brcc	.+22     	; 0x1758 <__vector_11+0xe0>
    1742:	42 2f       	mov	r20, r18
    1744:	09 c0       	rjmp	.+18     	; 0x1758 <__vector_11+0xe0>
    1746:	29 5f       	subi	r18, 0xF9	; 249
    1748:	3f 4f       	sbci	r19, 0xFF	; 255
    174a:	49 5f       	subi	r20, 0xF9	; 249
    174c:	5f 4f       	sbci	r21, 0xFF	; 255
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    174e:	f0 e1       	ldi	r31, 0x10	; 16
    1750:	22 3e       	cpi	r18, 0xE2	; 226
    1752:	3f 07       	cpc	r19, r31
    1754:	89 f6       	brne	.-94     	; 0x16f8 <__vector_11+0x80>
    1756:	d2 c0       	rjmp	.+420    	; 0x18fc <__vector_11+0x284>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1758:	5e ef       	ldi	r21, 0xFE	; 254
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    175a:	80 91 e8 00 	lds	r24, 0x00E8
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	c9 01       	movw	r24, r18
    1764:	85 70       	andi	r24, 0x05	; 5
    1766:	90 70       	andi	r25, 0x00	; 0
    1768:	89 2b       	or	r24, r25
    176a:	b9 f3       	breq	.-18     	; 0x175a <__vector_11+0xe2>
				if (i & (1<<RXOUTI)) return;	// abort
    176c:	22 fd       	sbrc	r18, 2
    176e:	c9 c0       	rjmp	.+402    	; 0x1902 <__vector_11+0x28a>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1770:	34 2f       	mov	r19, r20
    1772:	41 34       	cpi	r20, 0x41	; 65
    1774:	08 f0       	brcs	.+2      	; 0x1778 <__vector_11+0x100>
    1776:	30 e4       	ldi	r19, 0x40	; 64
    1778:	23 2f       	mov	r18, r19
    177a:	cb 01       	movw	r24, r22
    177c:	06 c0       	rjmp	.+12     	; 0x178a <__vector_11+0x112>
				for (i = n; i; i--) {
    177e:	fc 01       	movw	r30, r24
					UEDATX = pgm_read_byte(desc_addr++);
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	e4 91       	lpm	r30, Z+
    1784:	e0 93 f1 00 	sts	0x00F1, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1788:	21 50       	subi	r18, 0x01	; 1
    178a:	22 23       	and	r18, r18
    178c:	c1 f7       	brne	.-16     	; 0x177e <__vector_11+0x106>
    178e:	63 0f       	add	r22, r19
    1790:	71 1d       	adc	r23, r1
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1792:	43 1b       	sub	r20, r19
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1794:	50 93 e8 00 	sts	0x00E8, r21
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1798:	44 23       	and	r20, r20
    179a:	f9 f6       	brne	.-66     	; 0x175a <__vector_11+0xe2>
    179c:	30 34       	cpi	r19, 0x40	; 64
    179e:	e9 f2       	breq	.-70     	; 0x175a <__vector_11+0xe2>
    17a0:	b0 c0       	rjmp	.+352    	; 0x1902 <__vector_11+0x28a>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    17a2:	35 30       	cpi	r19, 0x05	; 5
    17a4:	61 f4       	brne	.+24     	; 0x17be <__vector_11+0x146>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    17a6:	8e ef       	ldi	r24, 0xFE	; 254
    17a8:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    17ac:	80 91 e8 00 	lds	r24, 0x00E8
    17b0:	80 ff       	sbrs	r24, 0
    17b2:	fc cf       	rjmp	.-8      	; 0x17ac <__vector_11+0x134>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    17b4:	86 2f       	mov	r24, r22
    17b6:	80 68       	ori	r24, 0x80	; 128
    17b8:	80 93 e3 00 	sts	0x00E3, r24
    17bc:	a2 c0       	rjmp	.+324    	; 0x1902 <__vector_11+0x28a>
			return;
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    17be:	39 30       	cpi	r19, 0x09	; 9
    17c0:	31 f5       	brne	.+76     	; 0x180e <__vector_11+0x196>
    17c2:	44 23       	and	r20, r20
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <__vector_11+0x150>
    17c6:	6e c0       	rjmp	.+220    	; 0x18a4 <__vector_11+0x22c>
			usb_configuration = wValue;
    17c8:	60 93 13 01 	sts	0x0113, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    17cc:	8e ef       	ldi	r24, 0xFE	; 254
    17ce:	80 93 e8 00 	sts	0x00E8, r24
    17d2:	8b ed       	ldi	r24, 0xDB	; 219
    17d4:	90 e1       	ldi	r25, 0x10	; 16
    17d6:	21 e0       	ldi	r18, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    17d8:	20 93 e9 00 	sts	0x00E9, r18
				en = pgm_read_byte(cfg++);
    17dc:	fc 01       	movw	r30, r24
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	e4 91       	lpm	r30, Z+
				UECONX = en;
    17e2:	e0 93 eb 00 	sts	0x00EB, r30
				if (en) {
    17e6:	ee 23       	and	r30, r30
    17e8:	69 f0       	breq	.+26     	; 0x1804 <__vector_11+0x18c>
					UECFG0X = pgm_read_byte(cfg++);
    17ea:	ac 01       	movw	r20, r24
    17ec:	4f 5f       	subi	r20, 0xFF	; 255
    17ee:	5f 4f       	sbci	r21, 0xFF	; 255
    17f0:	fc 01       	movw	r30, r24
    17f2:	84 91       	lpm	r24, Z+
    17f4:	80 93 ec 00 	sts	0x00EC, r24
					UECFG1X = pgm_read_byte(cfg++);
    17f8:	ca 01       	movw	r24, r20
    17fa:	01 96       	adiw	r24, 0x01	; 1
    17fc:	fa 01       	movw	r30, r20
    17fe:	34 91       	lpm	r19, Z+
    1800:	30 93 ed 00 	sts	0x00ED, r19
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1804:	2f 5f       	subi	r18, 0xFF	; 255
    1806:	25 30       	cpi	r18, 0x05	; 5
    1808:	39 f7       	brne	.-50     	; 0x17d8 <__vector_11+0x160>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    180a:	8e e1       	ldi	r24, 0x1E	; 30
    180c:	46 c0       	rjmp	.+140    	; 0x189a <__vector_11+0x222>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    180e:	38 30       	cpi	r19, 0x08	; 8
    1810:	51 f4       	brne	.+20     	; 0x1826 <__vector_11+0x1ae>
    1812:	40 38       	cpi	r20, 0x80	; 128
    1814:	09 f0       	breq	.+2      	; 0x1818 <__vector_11+0x1a0>
    1816:	46 c0       	rjmp	.+140    	; 0x18a4 <__vector_11+0x22c>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1818:	80 91 e8 00 	lds	r24, 0x00E8
    181c:	80 ff       	sbrs	r24, 0
    181e:	fc cf       	rjmp	.-8      	; 0x1818 <__vector_11+0x1a0>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1820:	80 91 13 01 	lds	r24, 0x0113
    1824:	5e c0       	rjmp	.+188    	; 0x18e2 <__vector_11+0x26a>
			usb_send_in();
			return;
		}

		if (bRequest == GET_STATUS) {
    1826:	33 23       	and	r19, r19
    1828:	c1 f4       	brne	.+48     	; 0x185a <__vector_11+0x1e2>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    182a:	80 91 e8 00 	lds	r24, 0x00E8
    182e:	80 ff       	sbrs	r24, 0
    1830:	fc cf       	rjmp	.-8      	; 0x182a <__vector_11+0x1b2>

		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1832:	42 38       	cpi	r20, 0x82	; 130
    1834:	11 f0       	breq	.+4      	; 0x183a <__vector_11+0x1c2>
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <__vector_11+0x1dc>
				UENUM = wIndex;
    183a:	a0 93 e9 00 	sts	0x00E9, r26
				if (UECONX & (1<<STALLRQ)) i = 1;
    183e:	80 91 eb 00 	lds	r24, 0x00EB
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	25 e0       	ldi	r18, 0x05	; 5
    1846:	96 95       	lsr	r25
    1848:	87 95       	ror	r24
    184a:	2a 95       	dec	r18
    184c:	e1 f7       	brne	.-8      	; 0x1846 <__vector_11+0x1ce>
    184e:	81 70       	andi	r24, 0x01	; 1
				UENUM = 0;
    1850:	10 92 e9 00 	sts	0x00E9, r1
			}
			#endif
			UEDATX = i;
    1854:	80 93 f1 00 	sts	0x00F1, r24
    1858:	39 c0       	rjmp	.+114    	; 0x18cc <__vector_11+0x254>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    185a:	31 30       	cpi	r19, 0x01	; 1
    185c:	11 f0       	breq	.+4      	; 0x1862 <__vector_11+0x1ea>
    185e:	33 30       	cpi	r19, 0x03	; 3
    1860:	09 f5       	brne	.+66     	; 0x18a4 <__vector_11+0x22c>
    1862:	42 30       	cpi	r20, 0x02	; 2
    1864:	f9 f4       	brne	.+62     	; 0x18a4 <__vector_11+0x22c>
    1866:	61 15       	cp	r22, r1
    1868:	71 05       	cpc	r23, r1
    186a:	e1 f4       	brne	.+56     	; 0x18a4 <__vector_11+0x22c>
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
    186c:	2a 2f       	mov	r18, r26
    186e:	2f 77       	andi	r18, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1870:	82 2f       	mov	r24, r18
    1872:	81 50       	subi	r24, 0x01	; 1
    1874:	84 30       	cpi	r24, 0x04	; 4
    1876:	b0 f4       	brcc	.+44     	; 0x18a4 <__vector_11+0x22c>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1878:	8e ef       	ldi	r24, 0xFE	; 254
    187a:	80 93 e8 00 	sts	0x00E8, r24
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    187e:	20 93 e9 00 	sts	0x00E9, r18
				if (bRequest == SET_FEATURE) {
    1882:	33 30       	cpi	r19, 0x03	; 3
    1884:	d9 f1       	breq	.+118    	; 0x18fc <__vector_11+0x284>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1886:	89 e1       	ldi	r24, 0x19	; 25
    1888:	80 93 eb 00 	sts	0x00EB, r24
					UERST = (1 << i);
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <__vector_11+0x21e>
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	2a 95       	dec	r18
    1898:	e2 f7       	brpl	.-8      	; 0x1892 <__vector_11+0x21a>
    189a:	80 93 ea 00 	sts	0x00EA, r24
					UERST = 0;
    189e:	10 92 ea 00 	sts	0x00EA, r1
    18a2:	2f c0       	rjmp	.+94     	; 0x1902 <__vector_11+0x28a>
				}
				return;
			}
		}
		#endif
		if (wIndex == MOUSE_INTERFACE) {
    18a4:	ab 2b       	or	r26, r27
    18a6:	51 f5       	brne	.+84     	; 0x18fc <__vector_11+0x284>
			if (bmRequestType == 0xA1) {
    18a8:	41 3a       	cpi	r20, 0xA1	; 161
    18aa:	f1 f4       	brne	.+60     	; 0x18e8 <__vector_11+0x270>
				if (bRequest == HID_GET_REPORT) {
    18ac:	31 30       	cpi	r19, 0x01	; 1
    18ae:	89 f4       	brne	.+34     	; 0x18d2 <__vector_11+0x25a>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    18b0:	80 91 e8 00 	lds	r24, 0x00E8
    18b4:	80 ff       	sbrs	r24, 0
    18b6:	fc cf       	rjmp	.-8      	; 0x18b0 <__vector_11+0x238>
		#endif
		if (wIndex == MOUSE_INTERFACE) {
			if (bmRequestType == 0xA1) {
				if (bRequest == HID_GET_REPORT) {
					usb_wait_in_ready();
					UEDATX = 0;
    18b8:	10 92 f1 00 	sts	0x00F1, r1
					UEDATX = 0;
    18bc:	10 92 f1 00 	sts	0x00F1, r1
					UEDATX = 0;
    18c0:	10 92 f1 00 	sts	0x00F1, r1
					UEDATX = 0;
    18c4:	10 92 f1 00 	sts	0x00F1, r1
					UEDATX = 0;
    18c8:	10 92 f1 00 	sts	0x00F1, r1
					UEDATX = 0;
    18cc:	10 92 f1 00 	sts	0x00F1, r1
    18d0:	11 c0       	rjmp	.+34     	; 0x18f4 <__vector_11+0x27c>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
    18d2:	33 30       	cpi	r19, 0x03	; 3
    18d4:	99 f4       	brne	.+38     	; 0x18fc <__vector_11+0x284>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    18d6:	80 91 e8 00 	lds	r24, 0x00E8
    18da:	80 ff       	sbrs	r24, 0
    18dc:	fc cf       	rjmp	.-8      	; 0x18d6 <__vector_11+0x25e>
					usb_send_in();
					return;
				}
				if (bRequest == HID_GET_PROTOCOL) {
					usb_wait_in_ready();
					UEDATX = mouse_protocol;
    18de:	80 91 10 01 	lds	r24, 0x0110
    18e2:	80 93 f1 00 	sts	0x00F1, r24
    18e6:	06 c0       	rjmp	.+12     	; 0x18f4 <__vector_11+0x27c>
					usb_send_in();
					return;
				}
			}
			if (bmRequestType == 0x21) {
    18e8:	41 32       	cpi	r20, 0x21	; 33
    18ea:	41 f4       	brne	.+16     	; 0x18fc <__vector_11+0x284>
				if (bRequest == HID_SET_PROTOCOL) {
    18ec:	3b 30       	cpi	r19, 0x0B	; 11
    18ee:	31 f4       	brne	.+12     	; 0x18fc <__vector_11+0x284>
					mouse_protocol = wValue;
    18f0:	60 93 10 01 	sts	0x0110, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18f4:	8e ef       	ldi	r24, 0xFE	; 254
    18f6:	80 93 e8 00 	sts	0x00E8, r24
    18fa:	03 c0       	rjmp	.+6      	; 0x1902 <__vector_11+0x28a>
					return;
				}
			}
		}
	}
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    18fc:	81 e2       	ldi	r24, 0x21	; 33
    18fe:	80 93 eb 00 	sts	0x00EB, r24
}
    1902:	ff 91       	pop	r31
    1904:	ef 91       	pop	r30
    1906:	bf 91       	pop	r27
    1908:	af 91       	pop	r26
    190a:	9f 91       	pop	r25
    190c:	8f 91       	pop	r24
    190e:	7f 91       	pop	r23
    1910:	6f 91       	pop	r22
    1912:	5f 91       	pop	r21
    1914:	4f 91       	pop	r20
    1916:	3f 91       	pop	r19
    1918:	2f 91       	pop	r18
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	0f 90       	pop	r0
    1920:	0f be       	out	0x3f, r0	; 63
    1922:	0f 90       	pop	r0
    1924:	1f 90       	pop	r1
    1926:	18 95       	reti

00001928 <__eerd_byte_m32u4>:
    1928:	f9 99       	sbic	0x1f, 1	; 31
    192a:	fe cf       	rjmp	.-4      	; 0x1928 <__eerd_byte_m32u4>
    192c:	92 bd       	out	0x22, r25	; 34
    192e:	81 bd       	out	0x21, r24	; 33
    1930:	f8 9a       	sbi	0x1f, 0	; 31
    1932:	99 27       	eor	r25, r25
    1934:	80 b5       	in	r24, 0x20	; 32
    1936:	08 95       	ret

00001938 <__eewr_byte_m32u4>:
    1938:	26 2f       	mov	r18, r22

0000193a <__eewr_r18_m32u4>:
    193a:	f9 99       	sbic	0x1f, 1	; 31
    193c:	fe cf       	rjmp	.-4      	; 0x193a <__eewr_r18_m32u4>
    193e:	1f ba       	out	0x1f, r1	; 31
    1940:	92 bd       	out	0x22, r25	; 34
    1942:	81 bd       	out	0x21, r24	; 33
    1944:	20 bd       	out	0x20, r18	; 32
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	fa 9a       	sbi	0x1f, 2	; 31
    194c:	f9 9a       	sbi	0x1f, 1	; 31
    194e:	0f be       	out	0x3f, r0	; 63
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	08 95       	ret

00001954 <_exit>:
    1954:	f8 94       	cli

00001956 <__stop_program>:
    1956:	ff cf       	rjmp	.-2      	; 0x1956 <__stop_program>
